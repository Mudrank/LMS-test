{"ast":null,"code":"import _defineProperty2 from\"@babel/runtime/helpers/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty2(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import{Component}from'react';import invariant from'invariant';import Animated from\"react-native-web/dist/exports/Animated\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import Keyboard from\"react-native-web/dist/exports/Keyboard\";import StatusBar from\"react-native-web/dist/exports/StatusBar\";import I18nManager from\"react-native-web/dist/exports/I18nManager\";import{PanGestureHandler,TapGestureHandler}from\"../handlers/gestureHandlers\";import{State}from\"../State\";var DRAG_TOSS=0.05;var IDLE='Idle';var DRAGGING='Dragging';var SETTLING='Settling';var DrawerLayout=function(_Component){_inherits(DrawerLayout,_Component);var _super=_createSuper(DrawerLayout);function DrawerLayout(_props){var _this;_classCallCheck(this,DrawerLayout);_this=_super.call(this,_props);_defineProperty(_assertThisInitialized(_this),\"openValue\",void 0);_defineProperty(_assertThisInitialized(_this),\"onGestureEvent\",void 0);_defineProperty(_assertThisInitialized(_this),\"accessibilityIsModalView\",React.createRef());_defineProperty(_assertThisInitialized(_this),\"pointerEventsView\",React.createRef());_defineProperty(_assertThisInitialized(_this),\"panGestureHandler\",React.createRef());_defineProperty(_assertThisInitialized(_this),\"drawerShown\",false);_defineProperty(_assertThisInitialized(_this),\"updateAnimatedEvent\",function(props,state){var drawerPosition=props.drawerPosition,drawerWidth=props.drawerWidth,drawerType=props.drawerType;var dragXValue=state.dragX,touchXValue=state.touchX,drawerTranslation=state.drawerTranslation,containerWidth=state.containerWidth;var dragX=dragXValue;var touchX=touchXValue;if(drawerPosition!=='left'){dragX=Animated.multiply(new Animated.Value(-1),dragXValue);touchX=Animated.add(new Animated.Value(containerWidth),Animated.multiply(new Animated.Value(-1),touchXValue));touchXValue.setValue(containerWidth);}else{touchXValue.setValue(0);}var translationX=dragX;if(drawerType==='front'){var startPositionX=Animated.add(touchX,Animated.multiply(new Animated.Value(-1),dragX));var dragOffsetFromOnStartPosition=startPositionX.interpolate({inputRange:[drawerWidth-1,drawerWidth,drawerWidth+1],outputRange:[0,0,1]});translationX=Animated.add(dragX,dragOffsetFromOnStartPosition);}_this.openValue=Animated.add(translationX,drawerTranslation).interpolate({inputRange:[0,drawerWidth],outputRange:[0,1],extrapolate:'clamp'});var gestureOptions={useNativeDriver:props.useNativeAnimations};if(_this.props.onDrawerSlide){gestureOptions.listener=function(ev){var _this$props$onDrawerS,_this$props;var translationX=Math.floor(Math.abs(ev.nativeEvent.translationX));var position=translationX/_this.state.containerWidth;(_this$props$onDrawerS=(_this$props=_this.props).onDrawerSlide)===null||_this$props$onDrawerS===void 0?void 0:_this$props$onDrawerS.call(_this$props,position);};}_this.onGestureEvent=Animated.event([{nativeEvent:{translationX:dragXValue,x:touchXValue}}],gestureOptions);});_defineProperty(_assertThisInitialized(_this),\"handleContainerLayout\",function(_ref){var nativeEvent=_ref.nativeEvent;_this.setState({containerWidth:nativeEvent.layout.width});});_defineProperty(_assertThisInitialized(_this),\"emitStateChanged\",function(newState,drawerWillShow){var _this$props$onDrawerS2,_this$props2;(_this$props$onDrawerS2=(_this$props2=_this.props).onDrawerStateChanged)===null||_this$props$onDrawerS2===void 0?void 0:_this$props$onDrawerS2.call(_this$props2,newState,drawerWillShow);});_defineProperty(_assertThisInitialized(_this),\"openingHandlerStateChange\",function(_ref2){var nativeEvent=_ref2.nativeEvent;if(nativeEvent.oldState===State.ACTIVE){_this.handleRelease({nativeEvent:nativeEvent});}else if(nativeEvent.state===State.ACTIVE){_this.emitStateChanged(DRAGGING,false);if(_this.props.keyboardDismissMode==='on-drag'){Keyboard.dismiss();}if(_this.props.hideStatusBar){StatusBar.setHidden(true,_this.props.statusBarAnimation||'slide');}}});_defineProperty(_assertThisInitialized(_this),\"onTapHandlerStateChange\",function(_ref3){var nativeEvent=_ref3.nativeEvent;if(_this.drawerShown&&nativeEvent.oldState===State.ACTIVE&&_this.props.drawerLockMode!=='locked-open'){_this.closeDrawer();}});_defineProperty(_assertThisInitialized(_this),\"handleRelease\",function(_ref4){var nativeEvent=_ref4.nativeEvent;var _this$props6=_this.props,drawerWidth=_this$props6.drawerWidth,drawerPosition=_this$props6.drawerPosition,drawerType=_this$props6.drawerType;var containerWidth=_this.state.containerWidth;var dragX=nativeEvent.translationX,velocityX=nativeEvent.velocityX,touchX=nativeEvent.x;if(drawerPosition!=='left'){dragX=-dragX;touchX=containerWidth-touchX;velocityX=-velocityX;}var gestureStartX=touchX-dragX;var dragOffsetBasedOnStart=0;if(drawerType==='front'){dragOffsetBasedOnStart=gestureStartX>drawerWidth?gestureStartX-drawerWidth:0;}var startOffsetX=dragX+dragOffsetBasedOnStart+(_this.drawerShown?drawerWidth:0);var projOffsetX=startOffsetX+DRAG_TOSS*velocityX;var shouldOpen=projOffsetX>drawerWidth/2;if(shouldOpen){_this.animateDrawer(startOffsetX,drawerWidth,velocityX);}else{_this.animateDrawer(startOffsetX,0,velocityX);}});_defineProperty(_assertThisInitialized(_this),\"updateShowing\",function(showing){var _this$accessibilityIs,_this$pointerEventsVi,_this$panGestureHandl;_this.drawerShown=showing;(_this$accessibilityIs=_this.accessibilityIsModalView.current)===null||_this$accessibilityIs===void 0?void 0:_this$accessibilityIs.setNativeProps({accessibilityViewIsModal:showing});(_this$pointerEventsVi=_this.pointerEventsView.current)===null||_this$pointerEventsVi===void 0?void 0:_this$pointerEventsVi.setNativeProps({pointerEvents:showing?'auto':'none'});var _this$props7=_this.props,drawerPosition=_this$props7.drawerPosition,minSwipeDistance=_this$props7.minSwipeDistance,edgeWidth=_this$props7.edgeWidth;var fromLeft=drawerPosition==='left';var gestureOrientation=(fromLeft?1:-1)*(_this.drawerShown?-1:1);var hitSlop=fromLeft?{left:0,width:showing?undefined:edgeWidth}:{right:0,width:showing?undefined:edgeWidth};(_this$panGestureHandl=_this.panGestureHandler.current)===null||_this$panGestureHandl===void 0?void 0:_this$panGestureHandl.setNativeProps({hitSlop:hitSlop,activeOffsetX:gestureOrientation*minSwipeDistance});});_defineProperty(_assertThisInitialized(_this),\"animateDrawer\",function(fromValue,toValue,velocity,speed){_this.state.dragX.setValue(0);_this.state.touchX.setValue(_this.props.drawerPosition==='left'?0:_this.state.containerWidth);if(fromValue!=null){var nextFramePosition=fromValue;if(_this.props.useNativeAnimations){if(fromValue<toValue&&velocity>0){nextFramePosition=Math.min(fromValue+velocity/60.0,toValue);}else if(fromValue>toValue&&velocity<0){nextFramePosition=Math.max(fromValue+velocity/60.0,toValue);}}_this.state.drawerTranslation.setValue(nextFramePosition);}var willShow=toValue!==0;_this.updateShowing(willShow);_this.emitStateChanged(SETTLING,willShow);if(_this.props.hideStatusBar){StatusBar.setHidden(willShow,_this.props.statusBarAnimation||'slide');}Animated.spring(_this.state.drawerTranslation,{velocity:velocity,bounciness:0,toValue:toValue,useNativeDriver:_this.props.useNativeAnimations,speed:speed!==null&&speed!==void 0?speed:undefined}).start(function(_ref5){var finished=_ref5.finished;if(finished){_this.emitStateChanged(IDLE,willShow);if(willShow){var _this$props$onDrawerO,_this$props3;(_this$props$onDrawerO=(_this$props3=_this.props).onDrawerOpen)===null||_this$props$onDrawerO===void 0?void 0:_this$props$onDrawerO.call(_this$props3);}else{var _this$props$onDrawerC,_this$props4;(_this$props$onDrawerC=(_this$props4=_this.props).onDrawerClose)===null||_this$props$onDrawerC===void 0?void 0:_this$props$onDrawerC.call(_this$props4);}}});});_defineProperty(_assertThisInitialized(_this),\"openDrawer\",function(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_this.animateDrawer(undefined,_this.props.drawerWidth,options.velocity?options.velocity:0);_this.forceUpdate();});_defineProperty(_assertThisInitialized(_this),\"closeDrawer\",function(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_this.animateDrawer(undefined,0,options.velocity?options.velocity:0);_this.forceUpdate();});_defineProperty(_assertThisInitialized(_this),\"renderOverlay\",function(){invariant(_this.openValue,'should be set');var overlayOpacity=_this.openValue.interpolate({inputRange:[0,1],outputRange:[0,1],extrapolate:'clamp'});var dynamicOverlayStyles={opacity:overlayOpacity,backgroundColor:_this.props.overlayColor};return React.createElement(TapGestureHandler,{onHandlerStateChange:_this.onTapHandlerStateChange},React.createElement(Animated.View,{pointerEvents:_this.drawerShown?'auto':'none',ref:_this.pointerEventsView,style:[styles.overlay,dynamicOverlayStyles]}));});_defineProperty(_assertThisInitialized(_this),\"renderDrawer\",function(){var _this$props8=_this.props,drawerBackgroundColor=_this$props8.drawerBackgroundColor,drawerWidth=_this$props8.drawerWidth,drawerPosition=_this$props8.drawerPosition,drawerType=_this$props8.drawerType,drawerContainerStyle=_this$props8.drawerContainerStyle,contentContainerStyle=_this$props8.contentContainerStyle;var fromLeft=drawerPosition==='left';var drawerSlide=drawerType!=='back';var containerSlide=drawerType!=='front';var reverseContentDirection=I18nManager.isRTL?fromLeft:!fromLeft;var dynamicDrawerStyles={backgroundColor:drawerBackgroundColor,width:drawerWidth};var openValue=_this.openValue;invariant(openValue,'should be set');var containerStyles;if(containerSlide){var containerTranslateX=openValue.interpolate({inputRange:[0,1],outputRange:fromLeft?[0,drawerWidth]:[0,-drawerWidth],extrapolate:'clamp'});containerStyles={transform:[{translateX:containerTranslateX}]};}var drawerTranslateX=0;if(drawerSlide){var closedDrawerOffset=fromLeft?-drawerWidth:drawerWidth;drawerTranslateX=openValue.interpolate({inputRange:[0,1],outputRange:[closedDrawerOffset,0],extrapolate:'clamp'});}var drawerStyles={transform:[{translateX:drawerTranslateX}],flexDirection:reverseContentDirection?'row-reverse':'row'};return React.createElement(Animated.View,{style:styles.main,onLayout:_this.handleContainerLayout},React.createElement(Animated.View,{style:[drawerType==='front'?styles.containerOnBack:styles.containerInFront,containerStyles,contentContainerStyle],importantForAccessibility:_this.drawerShown?'no-hide-descendants':'yes'},typeof _this.props.children==='function'?_this.props.children(_this.openValue):_this.props.children,_this.renderOverlay()),React.createElement(Animated.View,{pointerEvents:\"box-none\",ref:_this.accessibilityIsModalView,accessibilityViewIsModal:_this.drawerShown,style:[styles.drawerContainer,drawerStyles,drawerContainerStyle]},React.createElement(View,{style:dynamicDrawerStyles},_this.props.renderNavigationView(_this.openValue))));});_defineProperty(_assertThisInitialized(_this),\"setPanGestureRef\",function(ref){var _this$props$onGesture,_this$props5;_this.panGestureHandler.current=ref;(_this$props$onGesture=(_this$props5=_this.props).onGestureRef)===null||_this$props$onGesture===void 0?void 0:_this$props$onGesture.call(_this$props5,ref);});var _dragX=new Animated.Value(0);var _touchX=new Animated.Value(0);var _drawerTranslation=new Animated.Value(0);_this.state={dragX:_dragX,touchX:_touchX,drawerTranslation:_drawerTranslation,containerWidth:0};_this.updateAnimatedEvent(_props,_this.state);return _this;}_createClass(DrawerLayout,[{key:\"UNSAFE_componentWillUpdate\",value:function UNSAFE_componentWillUpdate(props,state){if(this.props.drawerPosition!==props.drawerPosition||this.props.drawerWidth!==props.drawerWidth||this.props.drawerType!==props.drawerType||this.state.containerWidth!==state.containerWidth){this.updateAnimatedEvent(props,state);}}},{key:\"render\",value:function render(){var _this$props9=this.props,drawerPosition=_this$props9.drawerPosition,drawerLockMode=_this$props9.drawerLockMode,edgeWidth=_this$props9.edgeWidth,minSwipeDistance=_this$props9.minSwipeDistance;var fromLeft=drawerPosition==='left';var gestureOrientation=(fromLeft?1:-1)*(this.drawerShown?-1:1);var hitSlop=fromLeft?{left:0,width:this.drawerShown?undefined:edgeWidth}:{right:0,width:this.drawerShown?undefined:edgeWidth};return React.createElement(PanGestureHandler,{ref:this.setPanGestureRef,hitSlop:hitSlop,activeOffsetX:gestureOrientation*minSwipeDistance,failOffsetY:[-15,15],onGestureEvent:this.onGestureEvent,onHandlerStateChange:this.openingHandlerStateChange,enableTrackpadTwoFingerGesture:this.props.enableTrackpadTwoFingerGesture,enabled:drawerLockMode!=='locked-closed'&&drawerLockMode!=='locked-open'},this.renderDrawer());}}]);return DrawerLayout;}(Component);export{DrawerLayout as default};_defineProperty(DrawerLayout,\"defaultProps\",{drawerWidth:200,drawerPosition:'left',useNativeAnimations:true,drawerType:'front',edgeWidth:20,minSwipeDistance:3,overlayColor:'rgba(0, 0, 0, 0.7)',drawerLockMode:'unlocked',enableTrackpadTwoFingerGesture:false});_defineProperty(DrawerLayout,\"positions\",{Left:'left',Right:'right'});var styles=StyleSheet.create({drawerContainer:_objectSpread(_objectSpread({},StyleSheet.absoluteFillObject),{},{zIndex:1001,flexDirection:'row'}),containerInFront:_objectSpread(_objectSpread({},StyleSheet.absoluteFillObject),{},{zIndex:1002}),containerOnBack:_objectSpread({},StyleSheet.absoluteFillObject),main:{flex:1,zIndex:0,overflow:'hidden'},overlay:_objectSpread(_objectSpread({},StyleSheet.absoluteFillObject),{},{zIndex:1000})});","map":{"version":3,"sources":["DrawerLayout.tsx"],"names":["DRAG_TOSS","IDLE","DRAGGING","SETTLING","DrawerLayout","drawerWidth","drawerPosition","useNativeAnimations","drawerType","edgeWidth","minSwipeDistance","overlayColor","drawerLockMode","enableTrackpadTwoFingerGesture","constructor","dragX","Animated","touchX","drawerTranslation","containerWidth","UNSAFE_componentWillUpdate","props","state","React","Left","Right","touchXValue","translationX","startPositionX","dragOffsetFromOnStartPosition","inputRange","outputRange","extrapolate","gestureOptions","useNativeDriver","ev","Math","position","nativeEvent","x","width","State","Keyboard","StatusBar","velocityX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","showing","accessibilityViewIsModal","pointerEvents","fromLeft","gestureOrientation","hitSlop","left","right","activeOffsetX","fromValue","nextFramePosition","velocity","willShow","toValue","bounciness","speed","undefined","finished","options","invariant","overlayOpacity","dynamicOverlayStyles","opacity","backgroundColor","onTapHandlerStateChange","styles","contentContainerStyle","drawerSlide","containerSlide","reverseContentDirection","I18nManager","dynamicDrawerStyles","openValue","containerTranslateX","containerStyles","transform","translateX","drawerTranslateX","closedDrawerOffset","drawerStyles","flexDirection","handleContainerLayout","ref","render","drawerContainer","StyleSheet","zIndex","containerInFront","containerOnBack","absoluteFillObject","main","flex","overflow","overlay"],"mappings":"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","sourcesContent":["// This component is based on RN's DrawerLayoutAndroid API\n//\n// It perhaps deserves to be put in a separate repo, but since it relies\n// on react-native-gesture-handler library which isn't very popular at the\n// moment I decided to keep it here for the time being. It will allow us\n// to move faster and fix issues that may arise in gesture handler library\n// that could be found when using the drawer component\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport invariant from 'invariant';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  Keyboard,\n  StatusBar,\n  I18nManager,\n  StatusBarAnimation,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n  NativeSyntheticEvent,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  PanGestureHandler,\n  PanGestureHandlerEventPayload,\n  TapGestureHandler,\n  HandlerStateChangeEvent,\n  TapGestureHandlerEventPayload,\n} from '../handlers/gestureHandlers';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\nconst IDLE: DrawerState = 'Idle';\nconst DRAGGING: DrawerState = 'Dragging';\nconst SETTLING: DrawerState = 'Settling';\n\nexport type DrawerPosition = 'left' | 'right';\n\nexport type DrawerState = 'Idle' | 'Dragging' | 'Settling';\n\nexport type DrawerType = 'front' | 'back' | 'slide';\n\nexport type DrawerLockMode = 'unlocked' | 'locked-closed' | 'locked-open';\n\nexport type DrawerKeyboardDismissMode = 'none' | 'on-drag';\n\nexport interface DrawerLayoutProps {\n  renderNavigationView: (\n    progressAnimatedValue: Animated.Value\n  ) => React.ReactNode;\n  drawerPosition?: DrawerPosition;\n  drawerWidth?: number;\n  drawerBackgroundColor?: string;\n  drawerLockMode?: DrawerLockMode;\n  keyboardDismissMode?: DrawerKeyboardDismissMode;\n  onDrawerClose?: () => void;\n  onDrawerOpen?: () => void;\n  onDrawerStateChanged?: (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => void;\n  useNativeAnimations?: boolean;\n\n  drawerType?: DrawerType;\n  edgeWidth?: number;\n  minSwipeDistance?: number;\n  hideStatusBar?: boolean;\n  statusBarAnimation?: StatusBarAnimation;\n  overlayColor?: string;\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  drawerContainerStyle?: StyleProp<ViewStyle>;\n  enableTrackpadTwoFingerGesture?: boolean;\n  onDrawerSlide?: (position: number) => void;\n  onGestureRef?: (ref: PanGestureHandler) => void;\n}\n\nexport type DrawerLayoutState = {\n  dragX: Animated.Value;\n  touchX: Animated.Value;\n  drawerTranslation: Animated.Value;\n  containerWidth: number;\n};\n\nexport type DrawerMovementOption = {\n  velocity?: number;\n  speed?: number;\n};\nexport default class DrawerLayout extends Component<\n  DrawerLayoutProps,\n  DrawerLayoutState\n> {\n  static defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false,\n  };\n\n  constructor(props: DrawerLayoutProps) {\n    super(props);\n\n    const dragX = new Animated.Value(0);\n    const touchX = new Animated.Value(0);\n    const drawerTranslation = new Animated.Value(0);\n\n    this.state = {\n      dragX,\n      touchX,\n      drawerTranslation,\n      containerWidth: 0,\n    };\n\n    this.updateAnimatedEvent(props, this.state);\n  }\n\n  UNSAFE_componentWillUpdate(\n    props: DrawerLayoutProps,\n    state: DrawerLayoutState\n  ) {\n    if (\n      this.props.drawerPosition !== props.drawerPosition ||\n      this.props.drawerWidth !== props.drawerWidth ||\n      this.props.drawerType !== props.drawerType ||\n      this.state.containerWidth !== state.containerWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n  }\n\n  private openValue?: Animated.AnimatedInterpolation;\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private accessibilityIsModalView = React.createRef<View>();\n  private pointerEventsView = React.createRef<View>();\n  private panGestureHandler = React.createRef<PanGestureHandler | null>();\n  private drawerShown = false;\n\n  static positions = {\n    Left: 'left',\n    Right: 'right',\n  };\n\n  private updateAnimatedEvent = (\n    props: DrawerLayoutProps,\n    state: DrawerLayoutState\n  ) => {\n    // Event definition is based on\n    const { drawerPosition, drawerWidth, drawerType } = props;\n    const {\n      dragX: dragXValue,\n      touchX: touchXValue,\n      drawerTranslation,\n      containerWidth,\n    } = state;\n\n    let dragX = dragXValue;\n    let touchX = touchXValue;\n\n    if (drawerPosition !== 'left') {\n      // Most of the code is written in a way to handle left-side drawer.\n      // In order to handle right-side drawer the only thing we need to\n      // do is to reverse events coming from gesture handler in a way they\n      // emulate left-side drawer gestures. E.g. dragX is simply -dragX, and\n      // touchX is calulcated by subtracing real touchX from the width of the\n      // container (such that when touch happens at the right edge the value\n      // is simply 0)\n      dragX = Animated.multiply(\n        new Animated.Value(-1),\n        dragXValue\n      ) as Animated.Value; // TODO(TS): (for all \"as\" in this file) make sure we can map this\n      touchX = Animated.add(\n        new Animated.Value(containerWidth),\n        Animated.multiply(new Animated.Value(-1), touchXValue)\n      ) as Animated.Value; // TODO(TS): make sure we can map this;\n      touchXValue.setValue(containerWidth);\n    } else {\n      touchXValue.setValue(0);\n    }\n\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep start position\n    // of the gesture. Then we use that value to calculate how much we need to subtract from\n    // the dragX. If the gesture started on the greyed out area we take the distance from the\n    // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n    // drawer be pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    //\n    let translationX = dragX;\n    if (drawerType === 'front') {\n      const startPositionX = Animated.add(\n        touchX,\n        Animated.multiply(new Animated.Value(-1), dragX)\n      );\n\n      const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n        inputRange: [drawerWidth! - 1, drawerWidth!, drawerWidth! + 1],\n        outputRange: [0, 0, 1],\n      });\n      translationX = Animated.add(\n        dragX,\n        dragOffsetFromOnStartPosition\n      ) as Animated.Value; // TODO: as above\n    }\n\n    this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\n      inputRange: [0, drawerWidth!],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    });\n\n    const gestureOptions: {\n      useNativeDriver: boolean;\n      // TODO: make sure it is correct\n      listener?: (\n        ev: NativeSyntheticEvent<PanGestureHandlerEventPayload>\n      ) => void;\n    } = {\n      useNativeDriver: props.useNativeAnimations!,\n    };\n\n    if (this.props.onDrawerSlide) {\n      gestureOptions.listener = (ev) => {\n        const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n        const position = translationX / this.state.containerWidth;\n\n        this.props.onDrawerSlide?.(position);\n      };\n    }\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragXValue, x: touchXValue } }],\n      gestureOptions\n    );\n  };\n\n  private handleContainerLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ containerWidth: nativeEvent.layout.width });\n  };\n\n  private emitStateChanged = (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => {\n    this.props.onDrawerStateChanged?.(newState, drawerWillShow);\n  };\n\n  private openingHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease({ nativeEvent });\n    } else if (nativeEvent.state === State.ACTIVE) {\n      this.emitStateChanged(DRAGGING, false);\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n      }\n    }\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (\n      this.drawerShown &&\n      nativeEvent.oldState === State.ACTIVE &&\n      this.props.drawerLockMode !== 'locked-open'\n    ) {\n      this.closeDrawer();\n    }\n  };\n\n  private handleRelease = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    const { drawerWidth, drawerPosition, drawerType } = this.props;\n    const { containerWidth } = this.state;\n    let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\n\n    if (drawerPosition !== 'left') {\n      // See description in _updateAnimatedEvent about why events are flipped\n      // for right-side drawer\n      dragX = -dragX;\n      touchX = containerWidth - touchX;\n      velocityX = -velocityX;\n    }\n\n    const gestureStartX = touchX - dragX;\n    let dragOffsetBasedOnStart = 0;\n\n    if (drawerType === 'front') {\n      dragOffsetBasedOnStart =\n        gestureStartX > drawerWidth! ? gestureStartX - drawerWidth! : 0;\n    }\n\n    const startOffsetX =\n      dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth! : 0);\n    const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n\n    const shouldOpen = projOffsetX > drawerWidth! / 2;\n\n    if (shouldOpen) {\n      this.animateDrawer(startOffsetX, drawerWidth!, velocityX);\n    } else {\n      this.animateDrawer(startOffsetX, 0, velocityX);\n    }\n  };\n\n  private updateShowing = (showing: boolean) => {\n    this.drawerShown = showing;\n    this.accessibilityIsModalView.current?.setNativeProps({\n      accessibilityViewIsModal: showing,\n    });\n    this.pointerEventsView.current?.setNativeProps({\n      pointerEvents: showing ? 'auto' : 'none',\n    });\n    const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\n    const fromLeft = drawerPosition === 'left';\n    // gestureOrientation is 1 if the expected gesture is from left to right and -1 otherwise\n    // e.g. when drawer is on the left and is closed we expect left to right gesture, thus\n    // orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n    // When drawer is closed we want the hitSlop to be horizontally shorter\n    // than the container size by the value of SLOP. This will make it only\n    // activate when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: showing ? undefined : edgeWidth }\n      : { right: 0, width: showing ? undefined : edgeWidth };\n    // @ts-ignore internal API, maybe could be fixed in handler types\n    this.panGestureHandler.current?.setNativeProps({\n      hitSlop,\n      activeOffsetX: gestureOrientation * minSwipeDistance!,\n    });\n  };\n\n  private animateDrawer = (\n    fromValue: number | null | undefined,\n    toValue: number,\n    velocity: number,\n    speed?: number\n  ) => {\n    this.state.dragX.setValue(0);\n    this.state.touchX.setValue(\n      this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth\n    );\n\n    if (fromValue != null) {\n      let nextFramePosition = fromValue;\n      if (this.props.useNativeAnimations) {\n        // When using native driver, we predict the next position of the animation\n        // because it takes one frame of a roundtrip to pass RELEASE event from\n        // native driver to JS before we can start animating. Without it, it is more\n        // noticable that the frame is dropped.\n        if (fromValue < toValue && velocity > 0) {\n          nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n        } else if (fromValue > toValue && velocity < 0) {\n          nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n        }\n      }\n      this.state.drawerTranslation.setValue(nextFramePosition);\n    }\n\n    const willShow = toValue !== 0;\n    this.updateShowing(willShow);\n    this.emitStateChanged(SETTLING, willShow);\n    if (this.props.hideStatusBar) {\n      StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n    }\n    Animated.spring(this.state.drawerTranslation, {\n      velocity,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      speed: speed ?? undefined,\n    }).start(({ finished }) => {\n      if (finished) {\n        this.emitStateChanged(IDLE, willShow);\n        if (willShow) {\n          this.props.onDrawerOpen?.();\n        } else {\n          this.props.onDrawerClose?.();\n        }\n      }\n    });\n  };\n\n  openDrawer = (options: DrawerMovementOption = {}) => {\n    this.animateDrawer(\n      // TODO: decide if it should be null or undefined is the proper value\n      undefined,\n      this.props.drawerWidth!,\n      options.velocity ? options.velocity : 0\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and it would not be clickable\n    this.forceUpdate();\n  };\n\n  closeDrawer = (options: DrawerMovementOption = {}) => {\n    // TODO: decide if it should be null or undefined is the proper value\n    this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0);\n\n    // We need to force the update, otherwise the overlay is not rerendered and it would be still clickable\n    this.forceUpdate();\n  };\n\n  private renderOverlay = () => {\n    /* Overlay styles */\n    invariant(this.openValue, 'should be set');\n    const overlayOpacity = this.openValue.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    });\n    const dynamicOverlayStyles = {\n      opacity: overlayOpacity,\n      backgroundColor: this.props.overlayColor,\n    };\n\n    return (\n      <TapGestureHandler onHandlerStateChange={this.onTapHandlerStateChange}>\n        <Animated.View\n          pointerEvents={this.drawerShown ? 'auto' : 'none'}\n          ref={this.pointerEventsView}\n          style={[styles.overlay, dynamicOverlayStyles]}\n        />\n      </TapGestureHandler>\n    );\n  };\n\n  private renderDrawer = () => {\n    const {\n      drawerBackgroundColor,\n      drawerWidth,\n      drawerPosition,\n      drawerType,\n      drawerContainerStyle,\n      contentContainerStyle,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n    const drawerSlide = drawerType !== 'back';\n    const containerSlide = drawerType !== 'front';\n\n    // we rely on row and row-reverse flex directions to position the drawer\n    // properly. Apparently for RTL these are flipped which requires us to use\n    // the opposite setting for the drawer to appear from left or right according\n    // to the drawerPosition prop\n    const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n\n    const dynamicDrawerStyles = {\n      backgroundColor: drawerBackgroundColor,\n      width: drawerWidth,\n    };\n    const openValue = this.openValue;\n    invariant(openValue, 'should be set');\n\n    let containerStyles;\n    if (containerSlide) {\n      const containerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: fromLeft ? [0, drawerWidth!] : [0, -drawerWidth!],\n        extrapolate: 'clamp',\n      });\n      containerStyles = {\n        transform: [{ translateX: containerTranslateX }],\n      };\n    }\n\n    let drawerTranslateX: number | Animated.AnimatedInterpolation = 0;\n    if (drawerSlide) {\n      const closedDrawerOffset = fromLeft ? -drawerWidth! : drawerWidth!;\n      drawerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [closedDrawerOffset, 0],\n        extrapolate: 'clamp',\n      });\n    }\n    const drawerStyles: {\n      transform: { translateX: number | Animated.AnimatedInterpolation }[];\n      flexDirection: 'row-reverse' | 'row';\n    } = {\n      transform: [{ translateX: drawerTranslateX }],\n      flexDirection: reverseContentDirection ? 'row-reverse' : 'row',\n    };\n\n    return (\n      <Animated.View style={styles.main} onLayout={this.handleContainerLayout}>\n        <Animated.View\n          style={[\n            drawerType === 'front'\n              ? styles.containerOnBack\n              : styles.containerInFront,\n            containerStyles,\n            contentContainerStyle,\n          ]}\n          importantForAccessibility={\n            this.drawerShown ? 'no-hide-descendants' : 'yes'\n          }>\n          {typeof this.props.children === 'function'\n            ? this.props.children(this.openValue)\n            : this.props.children}\n          {this.renderOverlay()}\n        </Animated.View>\n        <Animated.View\n          pointerEvents=\"box-none\"\n          ref={this.accessibilityIsModalView}\n          accessibilityViewIsModal={this.drawerShown}\n          style={[styles.drawerContainer, drawerStyles, drawerContainerStyle]}>\n          <View style={dynamicDrawerStyles}>\n            {this.props.renderNavigationView(this.openValue as Animated.Value)}\n          </View>\n        </Animated.View>\n      </Animated.View>\n    );\n  };\n\n  private setPanGestureRef = (ref: PanGestureHandler) => {\n    // TODO(TS): make sure it is OK\n    // taken from https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n    (this\n      .panGestureHandler as React.MutableRefObject<PanGestureHandler>).current = ref;\n    this.props.onGestureRef?.(ref);\n  };\n\n  render() {\n    const {\n      drawerPosition,\n      drawerLockMode,\n      edgeWidth,\n      minSwipeDistance,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n\n    // gestureOrientation is 1 if the expected gesture is from left to right and -1 otherwise\n    // e.g. when drawer is on the left and is closed we expect left to right gesture, thus\n    // orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n\n    // When drawer is closed we want the hitSlop to be horizontally shorter\n    // than the container size by the value of SLOP. This will make it only\n    // activate when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: this.drawerShown ? undefined : edgeWidth }\n      : { right: 0, width: this.drawerShown ? undefined : edgeWidth };\n\n    return (\n      <PanGestureHandler\n        // @ts-ignore could be fixed in handler types\n        ref={this.setPanGestureRef}\n        hitSlop={hitSlop}\n        activeOffsetX={gestureOrientation * minSwipeDistance!}\n        failOffsetY={[-15, 15]}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.openingHandlerStateChange}\n        enableTrackpadTwoFingerGesture={\n          this.props.enableTrackpadTwoFingerGesture\n        }\n        enabled={\n          drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n        }>\n        {this.renderDrawer()}\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  drawerContainer: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1001,\n    flexDirection: 'row',\n  },\n  containerInFront: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1002,\n  },\n  containerOnBack: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1000,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}