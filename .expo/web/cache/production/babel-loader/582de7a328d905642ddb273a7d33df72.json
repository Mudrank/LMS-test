{"ast":null,"code":"var validateFormat=function validateFormat(){};if(process.env.NODE_ENV!=='production'){validateFormat=function validateFormat(format){if(format===undefined){throw new Error('invariant requires an error message argument');}};}export default function invariant(condition,format,a,b,c,d,e,f){validateFormat(format);if(!condition){var error;if(format===undefined){error=new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');}else{var args=[a,b,c,d,e,f];var argIndex=0;error=new Error(format.replace(/%s/g,function(){return args[argIndex++];}));error.name='Invariant Violation';}error.framesToPop=1;throw error;}}","map":{"version":3,"sources":["invariant.js"],"names":["validateFormat","process","format","error","args","argIndex"],"mappings":"AAWA,GAAIA,CAAAA,cAAc,CAAG,yBAAY,CAAjC,CAAA,CAEA,GAAIC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,GAAJ,YAAA,CAA2C,CACzCD,cAAc,CAAG,wBAAA,MAAA,CAAkB,CACjC,GAAIE,MAAM,GAAV,SAAA,CAA0B,CACxB,KAAM,IAAA,CAAA,KAAA,CAAN,8CAAM,CAAN,CACD,CAHHF,CAAAA,CAKD,CAED,cAAe,SAAA,CAAA,SAAA,CAAA,SAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAwD,CACrEA,cAAc,CAAdA,MAAc,CAAdA,CAEA,GAAI,CAAJ,SAAA,CAAgB,CACd,GAAA,CAAA,KAAA,CACA,GAAIE,MAAM,GAAV,SAAA,CAA0B,CACxBC,KAAK,CAAG,GAAA,CAAA,KAAA,CAARA,+HAAQ,CAARA,CADF,CAAA,IAIO,CACL,GAAIC,CAAAA,IAAI,CAAG,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAX,CAAW,CAAX,CACA,GAAIC,CAAAA,QAAQ,CAAZ,CAAA,CACAF,KAAK,CAAG,GAAA,CAAA,KAAA,CACN,MAAM,CAAN,OAAA,CAAA,KAAA,CAAsB,UAAY,CAChC,MAAOC,CAAAA,IAAI,CAACC,QAAZ,EAAW,CAAX,CAFJF,CACE,CADM,CAARA,CAKAA,KAAK,CAALA,IAAAA,CAAAA,qBAAAA,CACD,CAEDA,KAAK,CAALA,WAAAA,CAjBc,CAiBdA,CACA,KAAA,CAAA,KAAA,CACD,CACF","sourcesContent":["/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function () {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function (format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nexport default function invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function () {\n          return args[argIndex++];\n        })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}