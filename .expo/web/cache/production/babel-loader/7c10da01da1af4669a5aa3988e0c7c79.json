{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import{processColor}from\"./Colors\";import{makeShareable,isConfigured}from\"./core\";import Platform from\"react-native-web/dist/exports/Platform\";import{_updatePropsJS}from\"./js-reanimated\";var colorProps=['backgroundColor','borderBottomColor','borderColor','borderLeftColor','borderRightColor','borderTopColor','borderStartColor','borderEndColor','color','shadowColor','textDecorationColor','tintColor','textShadowColor','overlayColor'];var ColorProperties=!isConfigured()?[]:makeShareable(colorProps);export var updateProps=function updateProps(viewDescriptor,updates,maybeViewRef,adapters){'worklet';var viewName=viewDescriptor.value.name||'RCTView';if(adapters){adapters.forEach(function(adapter){adapter(updates);});}if(Platform.OS!=='web'){Object.keys(updates).forEach(function(key){if(ColorProperties.indexOf(key)!==-1){updates[key]=processColor(updates[key]);}});}var updatePropsInternal=typeof _updateProps==='undefined'?_updatePropsJS:_updateProps;updatePropsInternal(viewDescriptor.value.tag,viewName,updates,maybeViewRef);};export var updatePropsJestWrapper=function updatePropsJestWrapper(viewDescriptor,updates,maybeViewRef,adapters,animatedStyle){animatedStyle.current.value=_extends(_extends({},animatedStyle.current.value),updates);updateProps(viewDescriptor,updates,maybeViewRef,adapters);};export default updateProps;","map":{"version":3,"sources":["C:/Users/Mudrank Gupta/OneDrive/WHJR/Pro/Wireless-Library-management/node_modules/react-native-reanimated/lib/reanimated2/UpdateProps.js"],"names":["processColor","makeShareable","isConfigured","_updatePropsJS","colorProps","ColorProperties","updateProps","viewDescriptor","updates","maybeViewRef","adapters","viewName","value","name","forEach","adapter","Platform","OS","Object","keys","key","indexOf","updatePropsInternal","_updateProps","tag","updatePropsJestWrapper","animatedStyle","current"],"mappings":"qDAGA,OAASA,YAAT,gBACA,OAASC,aAAT,CAAwBC,YAAxB,c,6DAEA,OAASC,cAAT,uBAEA,GAAMC,CAAAA,UAAU,CAAG,CACf,iBADe,CAEf,mBAFe,CAGf,aAHe,CAIf,iBAJe,CAKf,kBALe,CAMf,gBANe,CAOf,kBAPe,CAQf,gBARe,CASf,OATe,CAUf,aAVe,CAWf,qBAXe,CAYf,WAZe,CAaf,iBAbe,CAcf,cAde,CAAnB,CAgBA,GAAMC,CAAAA,eAAe,CAAG,CAACH,YAAY,EAAb,CAAkB,EAAlB,CAAuBD,aAAa,CAACG,UAAD,CAA5D,CACA,MAAO,IAAME,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,cAAD,CAAiBC,OAAjB,CAA0BC,YAA1B,CAAwCC,QAAxC,CAAqD,CAC5E,UACA,GAAMC,CAAAA,QAAQ,CAAGJ,cAAc,CAACK,KAAf,CAAqBC,IAArB,EAA6B,SAA9C,CACA,GAAIH,QAAJ,CAAc,CACVA,QAAQ,CAACI,OAAT,CAAiB,SAACC,OAAD,CAAa,CAC1BA,OAAO,CAACP,OAAD,CAAP,CACH,CAFD,EAGH,CACD,GAAIQ,QAAQ,CAACC,EAAT,GAAgB,KAApB,CAA2B,CACvBC,MAAM,CAACC,IAAP,CAAYX,OAAZ,EAAqBM,OAArB,CAA6B,SAACM,GAAD,CAAS,CAClC,GAAIf,eAAe,CAACgB,OAAhB,CAAwBD,GAAxB,IAAiC,CAAC,CAAtC,CAAyC,CACrCZ,OAAO,CAACY,GAAD,CAAP,CAAepB,YAAY,CAACQ,OAAO,CAACY,GAAD,CAAR,CAA3B,CACH,CACJ,CAJD,EAKH,CACD,GAAME,CAAAA,mBAAmB,CAAG,MAAOC,CAAAA,YAAP,GAAwB,WAAxB,CAAsCpB,cAAtC,CAAuDoB,YAAnF,CACAD,mBAAmB,CAACf,cAAc,CAACK,KAAf,CAAqBY,GAAtB,CAA2Bb,QAA3B,CAAqCH,OAArC,CAA8CC,YAA9C,CAAnB,CACH,CAjBM,CAkBP,MAAO,IAAMgB,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAAClB,cAAD,CAAiBC,OAAjB,CAA0BC,YAA1B,CAAwCC,QAAxC,CAAkDgB,aAAlD,CAAoE,CACtGA,aAAa,CAACC,OAAd,CAAsBf,KAAtB,CAA8B,SAAc,SAAc,EAAd,CAAkBc,aAAa,CAACC,OAAd,CAAsBf,KAAxC,CAAd,CAA8DJ,OAA9D,CAA9B,CACAF,WAAW,CAACC,cAAD,CAAiBC,OAAjB,CAA0BC,YAA1B,CAAwCC,QAAxC,CAAX,CACH,CAHM,CAIP,cAAeJ,CAAAA,WAAf","sourcesContent":["/* global _updateProps */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport { processColor } from './Colors';\nimport { makeShareable, isConfigured } from './core';\nimport { Platform } from 'react-native';\nimport { _updatePropsJS } from './js-reanimated';\n// copied from react-native/Libraries/Components/View/ReactNativeStyleAttributes\nconst colorProps = [\n    'backgroundColor',\n    'borderBottomColor',\n    'borderColor',\n    'borderLeftColor',\n    'borderRightColor',\n    'borderTopColor',\n    'borderStartColor',\n    'borderEndColor',\n    'color',\n    'shadowColor',\n    'textDecorationColor',\n    'tintColor',\n    'textShadowColor',\n    'overlayColor',\n];\nconst ColorProperties = !isConfigured() ? [] : makeShareable(colorProps);\nexport const updateProps = (viewDescriptor, updates, maybeViewRef, adapters) => {\n    'worklet';\n    const viewName = viewDescriptor.value.name || 'RCTView';\n    if (adapters) {\n        adapters.forEach((adapter) => {\n            adapter(updates);\n        });\n    }\n    if (Platform.OS !== 'web') {\n        Object.keys(updates).forEach((key) => {\n            if (ColorProperties.indexOf(key) !== -1) {\n                updates[key] = processColor(updates[key]);\n            }\n        });\n    }\n    const updatePropsInternal = typeof _updateProps === 'undefined' ? _updatePropsJS : _updateProps;\n    updatePropsInternal(viewDescriptor.value.tag, viewName, updates, maybeViewRef);\n};\nexport const updatePropsJestWrapper = (viewDescriptor, updates, maybeViewRef, adapters, animatedStyle) => {\n    animatedStyle.current.value = Object.assign(Object.assign({}, animatedStyle.current.value), updates);\n    updateProps(viewDescriptor, updates, maybeViewRef, adapters);\n};\nexport default updateProps;\n"]},"metadata":{},"sourceType":"module"}