{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}import*as Font from\"expo-font\";import React from\"react\";import Text from\"react-native-web/dist/exports/Text\";import createIconSet from\"./vendor/react-native-vector-icons/lib/create-icon-set\";import createIconButtonComponent from\"./vendor/react-native-vector-icons/lib/icon-button\";export{DEFAULT_ICON_COLOR,DEFAULT_ICON_SIZE}from\"./vendor/react-native-vector-icons/lib/create-icon-set\";export default function(glyphMap,fontName,expoAssetId,fontStyle){var _a;var font=_defineProperty({},fontName,expoAssetId);var RNVIconComponent=createIconSet(glyphMap,fontName,null,fontStyle);return _a=function(_React$Component){_inherits(Icon,_React$Component);var _super=_createSuper(Icon);function Icon(){var _this;_classCallCheck(this,Icon);_this=_super.apply(this,arguments);_this._mounted=false;_this.state={fontIsLoaded:Font.isLoaded(fontName)};return _this;}_createClass(Icon,[{key:\"componentDidMount\",value:function componentDidMount(){return _regeneratorRuntime.async(function componentDidMount$(_context){while(1){switch(_context.prev=_context.next){case 0:this._mounted=true;if(this.state.fontIsLoaded){_context.next=5;break;}_context.next=4;return _regeneratorRuntime.awrap(Font.loadAsync(font));case 4:this._mounted&&this.setState({fontIsLoaded:true});case 5:case\"end\":return _context.stop();}}},null,this,null,Promise);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this._mounted=false;}},{key:\"setNativeProps\",value:function setNativeProps(props){if(this._icon){this._icon.setNativeProps(props);}}},{key:\"render\",value:function render(){var _this2=this;if(__DEV__&&this.props.name&&!(this.props.name in glyphMap)){console.warn(\"\\\"\"+this.props.name+\"\\\" is not a valid icon name for family \\\"\"+fontName+\"\\\"\");}if(!this.state.fontIsLoaded){return React.createElement(Text,null);}return React.createElement(RNVIconComponent,_extends({ref:function ref(view){_this2._icon=view;}},this.props));}}]);return Icon;}(React.Component),_a.defaultProps=RNVIconComponent.defaultProps,_a.Button=createIconButtonComponent(_a),_a.glyphMap=glyphMap,_a.getRawGlyphMap=function(){return glyphMap;},_a.getFontFamily=function(){return fontName;},_a.loadFont=function(){return Font.loadAsync(font);},_a.font=font,_a;}","map":{"version":3,"sources":["../src/createIconSet.tsx"],"names":[],"mappings":"yrCAAA,MAAO,GAAK,CAAA,IAAZ,KAAsB,WAAtB,CACA,MAAO,CAAA,KAAP,KAAsC,OAAtC,C,qDAWA,MAAO,CAAA,aAAP,8DACA,MAAO,CAAA,yBAAP,0DAEA,OACE,kBADF,CAEE,iBAFF,8DAuFA,cAAc,UACZ,QADY,CAEZ,QAFY,CAGZ,WAHY,CAIZ,SAJY,CAIG,C,OAEf,GAAM,CAAA,IAAI,oBAAM,QAAN,CAAiB,WAAjB,CAAV,CACA,GAAM,CAAA,gBAAgB,CAAG,aAAa,CAAC,QAAD,CAAW,QAAX,CAAqB,IAArB,CAA2B,SAA3B,CAAtC,CAEA,MAAA,CAAA,EAAA,2FAAO,eAAA,sC,mCASL,MAAA,QAAA,CAAW,KAAX,CAGA,MAAA,KAAA,CAAQ,CACN,YAAY,CAAE,IAAI,CAAC,QAAL,CAAc,QAAd,CADR,CAAR,CAZK,aAsDN,CAtDD,kDAgBE,wJACE,KAAK,QAAL,CAAgB,IAAhB,CADF,GAEO,KAAK,KAAL,CAAW,YAFlB,0EAGU,IAAI,CAAC,SAAL,CAAe,IAAf,CAHV,SAII,KAAK,QAAL,EAAiB,KAAK,QAAL,CAAc,CAAE,YAAY,CAAE,IAAhB,CAAd,CAAjB,CAJJ,qEAhBF,oCAwBE,+BAAoB,CAClB,KAAK,QAAL,CAAgB,KAAhB,CACD,CA1BH,8BA4BE,wBAAe,KAAf,CAAoB,CAClB,GAAI,KAAK,KAAT,CAAgB,CACd,KAAK,KAAL,CAAW,cAAX,CAA0B,KAA1B,EACD,CACF,CAhCH,sBAkCE,iBAAM,iBACJ,GAAI,OAAO,EAAI,KAAK,KAAL,CAAW,IAAtB,EAA8B,EAAE,KAAK,KAAL,CAAW,IAAX,GAAmB,CAAA,QAArB,CAAlC,CAAkE,CAChE,OAAO,CAAC,IAAR,MACM,KAAK,KAAL,CAAW,IADjB,6CAC+D,QAD/D,OAGD,CAED,GAAI,CAAC,KAAK,KAAL,CAAW,YAAhB,CAA8B,CAC5B,MAAO,qBAAC,IAAD,MAAP,CACD,CAED,MACE,qBAAC,gBAAD,WACE,GAAG,CAAE,aAAC,IAAD,CAAS,CACZ,MAAI,CAAC,KAAL,CAAa,IAAb,CACD,CAHH,EAIM,KAAK,KAJX,EADF,CAQD,CArDH,kBAA0B,KAAK,CAAC,SAAhC,CAAA,CACS,EAAA,CAAA,YAAA,CAAe,gBAAgB,CAAC,YADzC,CAES,EAAA,CAAA,MAAA,CAAS,yBAAyB,CAAC,EAAD,CAF3C,CAGS,EAAA,CAAA,QAAA,CAAW,QAHpB,CAIS,EAAA,CAAA,cAAA,CAAiB,iBAAM,CAAA,QAAN,EAJ1B,CAKS,EAAA,CAAA,aAAA,CAAgB,iBAAM,CAAA,QAAN,EALzB,CAMS,EAAA,CAAA,QAAA,CAAW,iBAAM,CAAA,IAAI,CAAC,SAAL,CAAe,IAAf,CAAN,EANpB,CAOS,EAAA,CAAA,IAAA,CAAO,IAPhB,CAsDE,EAtDF,CAuDD","sourcesContent":["import * as Font from \"expo-font\";\nimport React, { ComponentClass } from \"react\";\nimport {\n  Text,\n  TextProps,\n  TouchableHighlightProps,\n  ViewProps,\n  OpaqueColorValue,\n  TextStyle,\n  ViewStyle,\n} from \"react-native\";\n\nimport createIconSet from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nimport createIconButtonComponent from \"./vendor/react-native-vector-icons/lib/icon-button\";\n\nexport {\n  DEFAULT_ICON_COLOR,\n  DEFAULT_ICON_SIZE,\n} from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\n\nexport interface IconProps<GLYPHS extends string> extends TextProps {\n  /**\n   * Size of the icon, can also be passed as fontSize in the style object.\n   *\n   * @default 12\n   */\n  size?: number;\n\n  /**\n   * Name of the icon to show\n   *\n   * See Icon Explorer app\n   * {@link https://expo.github.io/vector-icons/}\n   */\n  name: GLYPHS;\n\n  /**\n   * Color of the icon. Can be a string or OpaqueColorValue (returned from\n   * PlatformColor(..))\n   *\n   */\n  color?: string | OpaqueColorValue;\n}\n\nexport interface IconButtonProps<GLYPHS extends string>\n  extends IconProps<GLYPHS>,\n    ViewProps,\n    TouchableHighlightProps {\n  /**\n   * Text and icon color\n   * Use iconStyle or nest a Text component if you need different colors.\n   * Can be a string or OpaqueColorValue (returned from PlatformColor(..))\n   *\n   *  @default 'white'\n   */\n  color?: string | OpaqueColorValue;\n\n  /**\n   * Border radius of the button\n   * Set to 0 to disable.\n   *\n   * @default 5\n   */\n  borderRadius?: number;\n\n  /**\n   * Styles applied to the icon only\n   * Good for setting margins or a different color.\n   *\n   * @default {marginRight: 10}\n   */\n  iconStyle?: TextStyle;\n\n  /**\n   * Style prop inherited from TextProps and TouchableWithoutFeedbackProperties\n   * Only exist here so we can have ViewStyle or TextStyle\n   *\n   */\n  style?: ViewStyle | TextStyle;\n\n  /**\n   * Background color of the button. Can be a string or OpaqueColorValue (returned from\n   * PlatformColor(..))\n   *\n   * @default '#007AFF'\n   */\n  backgroundColor?: string | OpaqueColorValue;\n}\n\nexport type GlyphMap<G extends string> = { [K in G]: number | string };\n\nexport interface Icon<G extends string, FN extends string> {\n  defaultProps: any;\n  Button: ComponentClass<IconButtonProps<G>>;\n  glyphMap: GlyphMap<G>;\n  getRawGlyphMap: () => GlyphMap<G>;\n  getFontFamily: () => FN;\n  loadFont: () => Promise<void>;\n  font: { [x: string]: any };\n  new (props: IconProps<G>): React.Component<IconProps<G>>;\n}\n\nexport default function <G extends string, FN extends string>(\n  glyphMap: GlyphMap<G>,\n  fontName: FN,\n  expoAssetId,\n  fontStyle?: any\n): Icon<G, FN> {\n  const font = { [fontName]: expoAssetId };\n  const RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n\n  return class Icon extends React.Component<IconProps<G>> {\n    static defaultProps = RNVIconComponent.defaultProps;\n    static Button = createIconButtonComponent(Icon);\n    static glyphMap = glyphMap;\n    static getRawGlyphMap = () => glyphMap;\n    static getFontFamily = () => fontName;\n    static loadFont = () => Font.loadAsync(font);\n    static font = font;\n\n    _mounted = false;\n    _icon?: any;\n\n    state = {\n      fontIsLoaded: Font.isLoaded(fontName),\n    };\n\n    async componentDidMount() {\n      this._mounted = true;\n      if (!this.state.fontIsLoaded) {\n        await Font.loadAsync(font);\n        this._mounted && this.setState({ fontIsLoaded: true });\n      }\n    }\n\n    componentWillUnmount() {\n      this._mounted = false;\n    }\n\n    setNativeProps(props) {\n      if (this._icon) {\n        this._icon.setNativeProps(props);\n      }\n    }\n\n    render() {\n      if (__DEV__ && this.props.name && !(this.props.name in glyphMap)) {\n        console.warn(\n          `\"${this.props.name}\" is not a valid icon name for family \"${fontName}\"`\n        );\n      }\n\n      if (!this.state.fontIsLoaded) {\n        return <Text />;\n      }\n\n      return (\n        <RNVIconComponent\n          ref={(view) => {\n            this._icon = view;\n          }}\n          {...this.props}\n        />\n      );\n    }\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}