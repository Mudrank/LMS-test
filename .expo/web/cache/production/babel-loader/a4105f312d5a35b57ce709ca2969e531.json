{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import{ScreenContainer}from'react-native-screens';import createTabNavigator from\"../utils/createTabNavigator\";import BottomTabBar from\"../views/BottomTabBar\";import ResourceSavingScene from\"../views/ResourceSavingScene\";var TabNavigationView=function(_React$PureComponent){_inherits(TabNavigationView,_React$PureComponent);var _super=_createSuper(TabNavigationView);function TabNavigationView(){var _this;_classCallCheck(this,TabNavigationView);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty(_assertThisInitialized(_this),\"state\",{loaded:[_this.props.navigation.state.index]});_defineProperty(_assertThisInitialized(_this),\"_getButtonComponent\",function(_ref){var route=_ref.route;var descriptors=_this.props.descriptors;var descriptor=descriptors[route.key];var options=descriptor.options;if(options.tabBarButtonComponent){return options.tabBarButtonComponent;}return undefined;});_defineProperty(_assertThisInitialized(_this),\"_renderTabBar\",function(){var _this$props=_this.props,_this$props$tabBarCom=_this$props.tabBarComponent,TabBarComponent=_this$props$tabBarCom===void 0?BottomTabBar:_this$props$tabBarCom,tabBarOptions=_this$props.tabBarOptions,navigation=_this$props.navigation,screenProps=_this$props.screenProps,getLabelText=_this$props.getLabelText,getAccessibilityLabel=_this$props.getAccessibilityLabel,getAccessibilityRole=_this$props.getAccessibilityRole,getAccessibilityStates=_this$props.getAccessibilityStates,getTestID=_this$props.getTestID,renderIcon=_this$props.renderIcon,onTabPress=_this$props.onTabPress,onTabLongPress=_this$props.onTabLongPress;var descriptors=_this.props.descriptors;var state=_this.props.navigation.state;var route=state.routes[state.index];var descriptor=descriptors[route.key];var options=descriptor.options;if(options.tabBarVisible===false){return null;}return React.createElement(TabBarComponent,_extends({},tabBarOptions,{jumpTo:_this._jumpTo,navigation:navigation,screenProps:screenProps,onTabPress:onTabPress,onTabLongPress:onTabLongPress,getLabelText:getLabelText,getButtonComponent:_this._getButtonComponent,getAccessibilityLabel:getAccessibilityLabel,getAccessibilityRole:getAccessibilityRole,getAccessibilityStates:getAccessibilityStates,getTestID:getTestID,renderIcon:renderIcon}));});_defineProperty(_assertThisInitialized(_this),\"_jumpTo\",function(key){var _this$props2=_this.props,navigation=_this$props2.navigation,onIndexChange=_this$props2.onIndexChange;var index=navigation.state.routes.findIndex(function(route){return route.key===key;});onIndexChange(index);});return _this;}_createClass(TabNavigationView,[{key:\"render\",value:function render(){var _this$props3=this.props,navigation=_this$props3.navigation,renderScene=_this$props3.renderScene,lazy=_this$props3.lazy,_this$props3$detachIn=_this$props3.detachInactiveScreens,detachInactiveScreens=_this$props3$detachIn===void 0?true:_this$props3$detachIn;var routes=navigation.state.routes;var loaded=this.state.loaded;return React.createElement(View,{style:styles.container},React.createElement(ScreenContainer,{enabled:detachInactiveScreens,style:styles.pages},routes.map(function(route,index){if(lazy&&!loaded.includes(index)){return null;}var isFocused=navigation.state.index===index;return React.createElement(ResourceSavingScene,{key:route.key,style:StyleSheet.absoluteFill,isVisible:isFocused,enabled:detachInactiveScreens},renderScene({route:route}));})),this._renderTabBar());}}],[{key:\"getDerivedStateFromProps\",value:function getDerivedStateFromProps(nextProps,prevState){var index=nextProps.navigation.state.index;return{loaded:prevState.loaded.includes(index)?prevState.loaded:[].concat(_toConsumableArray(prevState.loaded),[index])};}}]);return TabNavigationView;}(React.PureComponent);_defineProperty(TabNavigationView,\"defaultProps\",{lazy:true,getAccessibilityRole:function getAccessibilityRole(){return'button';},getAccessibilityStates:function getAccessibilityStates(_ref2){var focused=_ref2.focused;return focused?['selected']:[];}});var styles=StyleSheet.create({container:{flex:1,overflow:'hidden'},pages:{flex:1}});export default createTabNavigator(TabNavigationView);","map":{"version":3,"sources":["createBottomTabNavigator.tsx"],"names":["TabNavigationView","React","lazy","getAccessibilityRole","getAccessibilityStates","focused","index","nextProps","loaded","prevState","route","descriptors","descriptor","options","tabBarComponent","TabBarComponent","onTabLongPress","state","renderIcon","key","onIndexChange","navigation","render","detachInactiveScreens","routes","styles","container","pages","isFocused","StyleSheet","renderScene","flex","overflow","createTabNavigator"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, AccessibilityRole } from 'react-native';\nimport { NavigationRoute } from 'react-navigation';\n\nimport { ScreenContainer } from 'react-native-screens';\n\nimport createTabNavigator, {\n  NavigationViewProps,\n} from '../utils/createTabNavigator';\nimport BottomTabBar from '../views/BottomTabBar';\nimport ResourceSavingScene from '../views/ResourceSavingScene';\nimport {\n  NavigationTabProp,\n  NavigationBottomTabOptions,\n  BottomTabBarOptions,\n  SceneDescriptorMap,\n} from '../types';\n\ntype Config = {\n  lazy?: boolean;\n  tabBarComponent?: React.ComponentType<any>;\n  tabBarOptions?: BottomTabBarOptions;\n  detachInactiveScreens?: boolean;\n};\n\ntype Props = NavigationViewProps &\n  Config & {\n    getAccessibilityRole: (props: {\n      route: NavigationRoute;\n    }) => AccessibilityRole | undefined;\n    getAccessibilityStates: (props: {\n      route: NavigationRoute;\n      focused: boolean;\n    }) => string[];\n    navigation: NavigationTabProp;\n    descriptors: SceneDescriptorMap;\n    screenProps?: unknown;\n  };\n\ntype State = {\n  loaded: number[];\n};\n\nclass TabNavigationView extends React.PureComponent<Props, State> {\n  static defaultProps = {\n    lazy: true,\n    getAccessibilityRole: (): AccessibilityRole => 'button',\n    getAccessibilityStates: ({ focused }: { focused: boolean }) =>\n      focused ? ['selected'] : [],\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index)\n        ? prevState.loaded\n        : [...prevState.loaded, index],\n    };\n  }\n\n  state = {\n    loaded: [this.props.navigation.state.index],\n  };\n\n  _getButtonComponent = ({ route }: { route: NavigationRoute }) => {\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarButtonComponent) {\n      return options.tabBarButtonComponent;\n    }\n\n    return undefined;\n  };\n\n  _renderTabBar = () => {\n    const {\n      tabBarComponent: TabBarComponent = BottomTabBar,\n      tabBarOptions,\n      navigation,\n      screenProps,\n      getLabelText,\n      getAccessibilityLabel,\n      getAccessibilityRole,\n      getAccessibilityStates,\n      getTestID,\n      renderIcon,\n      onTabPress,\n      onTabLongPress,\n    } = this.props;\n\n    const { descriptors } = this.props;\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarVisible === false) {\n      return null;\n    }\n\n    return (\n      <TabBarComponent\n        {...tabBarOptions}\n        jumpTo={this._jumpTo}\n        navigation={navigation}\n        screenProps={screenProps}\n        onTabPress={onTabPress}\n        onTabLongPress={onTabLongPress}\n        getLabelText={getLabelText}\n        getButtonComponent={this._getButtonComponent}\n        getAccessibilityLabel={getAccessibilityLabel}\n        getAccessibilityRole={getAccessibilityRole}\n        getAccessibilityStates={getAccessibilityStates}\n        getTestID={getTestID}\n        renderIcon={renderIcon}\n      />\n    );\n  };\n\n  _jumpTo = (key: string) => {\n    const { navigation, onIndexChange } = this.props;\n\n    const index = navigation.state.routes.findIndex(\n      (route) => route.key === key\n    );\n\n    onIndexChange(index);\n  };\n\n  render() {\n    const {\n      navigation,\n      renderScene,\n      lazy,\n      detachInactiveScreens = true,\n    } = this.props;\n    const { routes } = navigation.state;\n    const { loaded } = this.state;\n\n    return (\n      <View style={styles.container}>\n        {/* @ts-ignore */}\n        <ScreenContainer enabled={detachInactiveScreens} style={styles.pages}>\n          {routes.map((route, index) => {\n            if (lazy && !loaded.includes(index)) {\n              // Don't render a screen if we've never navigated to it\n              return null;\n            }\n\n            const isFocused = navigation.state.index === index;\n\n            return (\n              <ResourceSavingScene\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                isVisible={isFocused}\n                enabled={detachInactiveScreens}\n              >\n                {renderScene({ route })}\n              </ResourceSavingScene>\n            );\n          })}\n        </ScreenContainer>\n        {this._renderTabBar()}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  pages: {\n    flex: 1,\n  },\n});\n\nexport default createTabNavigator<Config, NavigationBottomTabOptions, Props>(\n  TabNavigationView\n);\n"]},"metadata":{},"sourceType":"module"}