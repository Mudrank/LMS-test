{"ast":null,"code":"import*as NavigationActions from\"../NavigationActions\";import invariant from\"../utils/invariant\";var getNavigationActionCreators=function getNavigationActionCreators(route){return{goBack:function goBack(key){var actualizedKey=key;if(key===undefined&&route.key){invariant(typeof route.key==='string','key should be a string');actualizedKey=route.key;}return NavigationActions.back({key:actualizedKey});},navigate:function navigate(navigateTo,params,action){if(typeof navigateTo==='string'){return NavigationActions.navigate({routeName:navigateTo,params:params,action:action});}invariant(typeof navigateTo==='object','Must navigateTo an object or a string');invariant(params==null,'Params must not be provided to .navigate() when specifying an object');invariant(action==null,'Child action must not be provided to .navigate() when specifying an object');return NavigationActions.navigate(navigateTo);},setParams:function setParams(params){invariant(route.key&&typeof route.key==='string','setParams cannot be called by root navigator');return NavigationActions.setParams({params:params,key:route.key});}};};export default getNavigationActionCreators;","map":{"version":3,"sources":["getNavigationActionCreators.ts"],"names":["getNavigationActionCreators","route","goBack","key","actualizedKey","invariant","navigate","routeName","params","action","NavigationActions","setParams"],"mappings":"AAAA,MAAO,GAAP,CAAA,iBAAA,4BACA,MAAA,CAAA,SAAA,0BAOA,GAAMA,CAAAA,2BAA2B,CAAIC,QAA/BD,CAAAA,2BAA+BC,CAAAA,KAAD,CAAgB,CAClD,MAAO,CACLC,MAAM,CAAGC,gBAAAA,GAAD,CAAyB,CAC/B,GAAIC,CAAAA,aAAa,CAAjB,GAAA,CACA,GAAID,GAAG,GAAHA,SAAAA,EAAqBF,KAAK,CAA9B,GAAA,CAAoC,CAClCI,SAAS,CAAC,MAAOJ,CAAAA,KAAK,CAAZ,GAAA,GAAD,QAAA,CAATI,wBAAS,CAATA,CACAD,aAAa,CAAGH,KAAK,CAArBG,GAAAA,CACD,CACD,MAAO,CAAA,iBAAiB,CAAjB,IAAA,CAAuB,CAAED,GAAG,CAAEC,aAAP,CAAvB,CAAP,CAPG,CAAA,CASLE,QAAQ,CAAE,kBAAA,UAAA,CAAA,MAAA,CAAA,MAAA,CAIL,CACH,GAAI,MAAA,CAAA,UAAA,GAAJ,QAAA,CAAoC,CAClC,MAAO,CAAA,iBAAiB,CAAjB,QAAA,CAA2B,CAChCC,SAAS,CADuB,UAAA,CAEhCC,MAFgC,CAEhCA,MAFgC,CAGhCC,MAAAA,CAAAA,MAHgC,CAA3B,CAAP,CAKD,CACDJ,SAAS,CACP,MAAA,CAAA,UAAA,GADO,QAAA,CAATA,uCAAS,CAATA,CAIAA,SAAS,CACPG,MAAM,EADC,IAAA,CAATH,sEAAS,CAATA,CAIAA,SAAS,CACPI,MAAM,EADC,IAAA,CAATJ,4EAAS,CAATA,CAIA,MAAOK,CAAAA,iBAAiB,CAAjBA,QAAAA,CAAP,UAAOA,CAAP,CAjCG,CAAA,CAmCLC,SAAS,CAAGH,mBAAAA,MAAD,CAA+B,CACxCH,SAAS,CACPJ,KAAK,CAALA,GAAAA,EAAa,MAAOA,CAAAA,KAAK,CAAZ,GAAA,GADN,QAAA,CAATI,8CAAS,CAATA,CAIA,MAAO,CAAA,iBAAiB,CAAjB,SAAA,CAA4B,CAAEG,MAAF,CAAEA,MAAF,CAAUL,GAAG,CAAEF,KAAK,CAACE,GAArB,CAA5B,CAAP,CACD,CAzCI,CAAP,CADF,CAAA,CA8CA,cAAA,CAAA,2BAAA","sourcesContent":["import * as NavigationActions from '../NavigationActions';\nimport invariant from '../utils/invariant';\n\ninterface NavigationParams {\n  [key: string]: any;\n}\n\n// TODO: Type `route`\nconst getNavigationActionCreators = (route: any) => {\n  return {\n    goBack: (key?: string | null) => {\n      let actualizedKey = key;\n      if (key === undefined && route.key) {\n        invariant(typeof route.key === 'string', 'key should be a string');\n        actualizedKey = route.key;\n      }\n      return NavigationActions.back({ key: actualizedKey });\n    },\n    navigate: (\n      navigateTo: string | NavigationActions.NavigationNavigateActionPayload,\n      params?: NavigationParams,\n      action?: NavigationActions.NavigationNavigateAction\n    ) => {\n      if (typeof navigateTo === 'string') {\n        return NavigationActions.navigate({\n          routeName: navigateTo,\n          params,\n          action,\n        });\n      }\n      invariant(\n        typeof navigateTo === 'object',\n        'Must navigateTo an object or a string'\n      );\n      invariant(\n        params == null,\n        'Params must not be provided to .navigate() when specifying an object'\n      );\n      invariant(\n        action == null,\n        'Child action must not be provided to .navigate() when specifying an object'\n      );\n      return NavigationActions.navigate(navigateTo);\n    },\n    setParams: (params?: NavigationParams) => {\n      invariant(\n        route.key && typeof route.key === 'string',\n        'setParams cannot be called by root navigator'\n      );\n      return NavigationActions.setParams({ params, key: route.key });\n    },\n  };\n};\n\nexport default getNavigationActionCreators;\n"]},"metadata":{},"sourceType":"module"}