{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import ScrollView from\"react-native-web/dist/exports/ScrollView\";import Platform from\"react-native-web/dist/exports/Platform\";import FlatList from\"react-native-web/dist/exports/FlatList\";import SectionList from\"react-native-web/dist/exports/SectionList\";import RefreshControl from\"react-native-web/dist/exports/RefreshControl\";import{ScrollView as GHScrollView}from'react-native-gesture-handler';import createNavigationAwareScrollable from\"./createNavigationAwareScrollable\";import invariant from\"./utils/invariant\";var WrappedScrollView;if(Platform.OS==='android'){WrappedScrollView=createNavigationAwareScrollable(ScrollView);}else{WrappedScrollView=createNavigationAwareScrollable(GHScrollView);}function propsMaybeWithRefreshControl(props){var onRefresh=props.onRefresh;if(onRefresh){invariant(typeof props.refreshing==='boolean','`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `'+JSON.stringify(props.refreshing)+'`');return _objectSpread(_objectSpread({},props),{},{refreshControl:props.refreshControl==null?React.createElement(RefreshControl,{refreshing:props.refreshing,onRefresh:onRefresh,progressViewOffset:props.progressViewOffset}):props.refreshControl});}else{return props;}}var WrappedFlatList=React.forwardRef(function(props,ref){return React.createElement(FlatList,_extends({ref:ref},props,{renderScrollComponent:function renderScrollComponent(props){return React.createElement(WrappedScrollView,propsMaybeWithRefreshControl(props));}}));});var WrappedSectionList=React.forwardRef(function(props,ref){return React.createElement(SectionList,_extends({ref:ref},props,{renderScrollComponent:function renderScrollComponent(props){return React.createElement(WrappedScrollView,propsMaybeWithRefreshControl(props));}}));});export{WrappedScrollView as ScrollView,WrappedFlatList as FlatList,WrappedSectionList as SectionList};","map":{"version":3,"sources":["Scrollables.js"],"names":["ScrollView","Platform","WrappedScrollView","createNavigationAwareScrollable","onRefresh","props","invariant","JSON","refreshControl","progressViewOffset","WrappedFlatList","ref","propsMaybeWithRefreshControl","WrappedSectionList"],"mappings":"snCAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,uUAQA,OAASA,UAAU,GAAnB,CAAA,YAAA,KAAA,8BAAA,CACA,MAAA,CAAA,+BAAA,yCACA,MAAA,CAAA,SAAA,yBAEA,GAAA,CAAA,iBAAA,CACA,GAAIC,QAAQ,CAARA,EAAAA,GAAJ,SAAA,CAA+B,CAI7BC,iBAAiB,CAAGC,+BAA+B,CAAnDD,UAAmD,CAAnDA,CAJF,CAAA,IAKO,CACLA,iBAAiB,CAAGC,+BAA+B,CAAnDD,YAAmD,CAAnDA,CACD,CAED,QAAA,CAAA,4BAAA,CAAA,KAAA,CAA6C,CAC3C,GAAME,CAAAA,SAAS,CAAGC,KAAK,CAAvB,SAAA,CACA,GAAA,SAAA,CAAe,CACbC,SAAS,CACP,MAAOD,CAAAA,KAAK,CAAZ,UAAA,GADO,SAAA,CAEP,oFACEE,IAAI,CAAJA,SAAAA,CAAeF,KAAK,CADtB,UACEE,CADF,CAFFD,GAAS,CAATA,CAMA,sCAAO,KAAP,MAEEE,cAAc,CACZ,KAAK,CAAL,cAAA,EAAA,IAAA,CACE,KAAA,CAAA,aAAA,CAAA,cAAA,CAAA,CACE,UAAU,CAAEH,KAAK,CADnB,UAAA,CAEE,SAAS,CAFX,SAAA,CAGE,kBAAkB,CAAEA,KAAK,CAACI,kBAH5B,CAAA,CADF,CAOEJ,KAAK,CAACG,cAVZ,GAPF,CAAA,IAoBO,CACL,MAAA,CAAA,KAAA,CACD,CACF,CAED,GAAME,CAAAA,eAAe,CAAG,KAAK,CAAL,UAAA,CAAiB,SAAA,KAAA,CAAA,GAAA,QACvC,CAAA,KAAA,CAAA,aAAA,CAAA,QAAA,CAAA,QAAA,CAAA,CACE,GAAG,CAAEC,GADP,CAAA,CAAA,KAAA,CAAA,CAGE,qBAAqB,CAAGN,+BAAAA,KAAD,QACrB,CAAA,KAAA,CAAA,aAAA,CAAA,iBAAA,CAAuBO,4BAA4B,CAAnD,KAAmD,CAAnD,CADqB,EAHzB,CAAA,CAAA,CADuC,EAAjB,CAAxB,CAUA,GAAMC,CAAAA,kBAAkB,CAAG,KAAK,CAAL,UAAA,CAAiB,SAAA,KAAA,CAAA,GAAA,QAC1C,CAAA,KAAA,CAAA,aAAA,CAAA,WAAA,CAAA,QAAA,CAAA,CACE,GAAG,CAAEF,GADP,CAAA,CAAA,KAAA,CAAA,CAGE,qBAAqB,CAAGN,+BAAAA,KAAD,QACrB,CAAA,KAAA,CAAA,aAAA,CAAA,iBAAA,CAAuBO,4BAA4B,CAAnD,KAAmD,CAAnD,CADqB,EAHzB,CAAA,CAAA,CAD0C,EAAjB,CAA3B,CAUA,OACEV,iBAAiB,GADnB,CAAA,UAAA,CAEEQ,eAAe,GAFjB,CAAA,QAAA,CAGEG,kBAAkB,GAHpB,CAAA,WAAA","sourcesContent":["import * as React from 'react';\nimport {\n  ScrollView,\n  Platform,\n  FlatList,\n  SectionList,\n  RefreshControl,\n} from 'react-native';\nimport { ScrollView as GHScrollView } from 'react-native-gesture-handler';\nimport createNavigationAwareScrollable from './createNavigationAwareScrollable';\nimport invariant from './utils/invariant';\n\nlet WrappedScrollView;\nif (Platform.OS === 'android') {\n  // @todo: use GHScrollView again when\n  // https://github.com/kmagiera/react-native-gesture-handler/issues/560 has\n  // been fixed.\n  WrappedScrollView = createNavigationAwareScrollable(ScrollView);\n} else {\n  WrappedScrollView = createNavigationAwareScrollable(GHScrollView);\n}\n\nfunction propsMaybeWithRefreshControl(props) {\n  const onRefresh = props.onRefresh;\n  if (onRefresh) {\n    invariant(\n      typeof props.refreshing === 'boolean',\n      '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' +\n        JSON.stringify(props.refreshing) +\n        '`'\n    );\n    return {\n      ...props,\n      refreshControl:\n        props.refreshControl == null ? (\n          <RefreshControl\n            refreshing={props.refreshing}\n            onRefresh={onRefresh}\n            progressViewOffset={props.progressViewOffset}\n          />\n        ) : (\n          props.refreshControl\n        ),\n    };\n  } else {\n    return props;\n  }\n}\n\nconst WrappedFlatList = React.forwardRef((props, ref) => (\n  <FlatList\n    ref={ref}\n    {...props}\n    renderScrollComponent={(props) => (\n      <WrappedScrollView {...propsMaybeWithRefreshControl(props)} />\n    )}\n  />\n));\n\nconst WrappedSectionList = React.forwardRef((props, ref) => (\n  <SectionList\n    ref={ref}\n    {...props}\n    renderScrollComponent={(props) => (\n      <WrappedScrollView {...propsMaybeWithRefreshControl(props)} />\n    )}\n  />\n));\n\nexport {\n  WrappedScrollView as ScrollView,\n  WrappedFlatList as FlatList,\n  WrappedSectionList as SectionList,\n};\n"]},"metadata":{},"sourceType":"module"}