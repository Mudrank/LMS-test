{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import invariant from\"../utils/invariant\";import getScreenForRouteName from\"./getScreenForRouteName\";import createConfigGetter from\"./createConfigGetter\";import*as NavigationActions from\"../NavigationActions\";import*as SwitchActions from\"./SwitchActions\";import*as StackActions from\"./StackActions\";import validateRouteConfigMap from\"./validateRouteConfigMap\";import{createPathParser}from\"./pathUtils\";var defaultActionCreators=function defaultActionCreators(){return{};};export default(function(routeConfigs){var config=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};validateRouteConfigMap(routeConfigs);var order=config.order||Object.keys(routeConfigs);var getCustomActionCreators=config.getCustomActionCreators||defaultActionCreators;var initialRouteParams=config.initialRouteParams;var initialRouteName=config.initialRouteName||order[0];var backBehavior=config.backBehavior||'none';var resetOnBlur=config.hasOwnProperty('resetOnBlur')?config.resetOnBlur:true;var initialRouteIndex=order.indexOf(initialRouteName);if(initialRouteIndex===-1){throw new Error(\"Invalid initialRouteName '\".concat(initialRouteName,\"'.\")+\"Should be one of \".concat(order.map(function(n){return\"\\\"\".concat(n,\"\\\"\");}).join(', ')));}var childRouters={};order.forEach(function(routeName){childRouters[routeName]=null;var screen=getScreenForRouteName(routeConfigs,routeName);if(screen.router){childRouters[routeName]=screen.router;}});function getParamsForRoute(routeName,params){var routeConfig=routeConfigs[routeName];if(routeConfig&&routeConfig.params){return _objectSpread(_objectSpread({},routeConfig.params),params);}else{return params;}}var _createPathParser=createPathParser(childRouters,routeConfigs,config),getPathAndParamsForRoute=_createPathParser.getPathAndParamsForRoute,_getActionForPathAndParams=_createPathParser.getActionForPathAndParams;function resetChildRoute(routeName){var initialParams=routeName===initialRouteName?initialRouteParams:null;var params=getParamsForRoute(routeName,initialParams);var childRouter=childRouters[routeName];if(childRouter){var childAction=NavigationActions.init();return _objectSpread(_objectSpread({},childRouter.getStateForAction(childAction)),{},{key:routeName,routeName:routeName},params?{params:params}:{});}return _objectSpread({key:routeName,routeName:routeName},params?{params:params}:{});}function getNextState(action,prevState,possibleNextState){function updateNextStateHistory(prevState,nextState){if(backBehavior!=='history'||prevState&&nextState&&nextState.index===prevState.index){return nextState;}var nextRouteKeyHistory=prevState?prevState.routeKeyHistory:[];if(action.type===NavigationActions.NAVIGATE){nextRouteKeyHistory=_toConsumableArray(nextRouteKeyHistory);var keyToAdd=nextState.routes[nextState.index].key;nextRouteKeyHistory=nextRouteKeyHistory.filter(function(k){return k!==keyToAdd;});nextRouteKeyHistory.push(keyToAdd);}else if(action.type===NavigationActions.BACK){nextRouteKeyHistory=_toConsumableArray(nextRouteKeyHistory);nextRouteKeyHistory.pop();}return _objectSpread(_objectSpread({},nextState),{},{routeKeyHistory:nextRouteKeyHistory});}var nextState=possibleNextState;if(prevState&&possibleNextState&&prevState.index!==possibleNextState.index&&resetOnBlur){var prevRouteName=prevState.routes[prevState.index].routeName;var nextRoutes=_toConsumableArray(possibleNextState.routes);nextRoutes[prevState.index]=resetChildRoute(prevRouteName);nextState=_objectSpread(_objectSpread({},possibleNextState),{},{routes:nextRoutes});}return updateNextStateHistory(prevState,nextState);}function getInitialState(){var routes=order.map(resetChildRoute);var initialState={routes:routes,index:initialRouteIndex};if(backBehavior==='history'){var initialKey=routes[initialRouteIndex].key;initialState['routeKeyHistory']=[initialKey];}return initialState;}return{childRouters:childRouters,getActionCreators:function getActionCreators(route,stateKey){return getCustomActionCreators(route,stateKey);},getStateForAction:function getStateForAction(action,inputState){var prevState=inputState?_objectSpread({},inputState):inputState;var state=inputState||getInitialState();var activeChildIndex=state.index;if(action.type===NavigationActions.INIT){var params=action.params;if(params){state.routes=state.routes.map(function(route){return _objectSpread(_objectSpread({},route),{},{params:_objectSpread(_objectSpread(_objectSpread({},route.params),params),route.routeName===initialRouteName?initialRouteParams:null)});});}}if(action.type===SwitchActions.JUMP_TO&&(action.key==null||action.key===state.key)){var _params=action.params;var index=state.routes.findIndex(function(route){return route.routeName===action.routeName;});if(index===-1){throw new Error(\"There is no route named '\".concat(action.routeName,\"' in the navigator with the key '\").concat(action.key,\"'.\\n\")+\"Must be one of: \".concat(state.routes.map(function(route){return\"'\".concat(route.routeName,\"'\");}).join(',')));}return getNextState(action,prevState,_objectSpread(_objectSpread({},state),{},{routes:_params?state.routes.map(function(route,i){return i===index?_objectSpread(_objectSpread({},route),{},{params:_objectSpread(_objectSpread({},route.params),_params)}):route;}):state.routes,index:index}));}var activeChildLastState=state.routes[state.index];var activeChildRouter=childRouters[order[state.index]];if(activeChildRouter){var activeChildState=activeChildRouter.getStateForAction(action,activeChildLastState);if(!activeChildState&&inputState){return null;}if(activeChildState&&activeChildState!==activeChildLastState){var routes=_toConsumableArray(state.routes);routes[state.index]=activeChildState;return getNextState(action,prevState,_objectSpread(_objectSpread({},state),{},{routes:routes}));}}var isBackEligible=action.key==null||action.key===activeChildLastState.key;if(action.type===NavigationActions.BACK){if(isBackEligible&&backBehavior==='initialRoute'){activeChildIndex=initialRouteIndex;}else if(isBackEligible&&backBehavior==='order'){activeChildIndex=Math.max(0,activeChildIndex-1);}else if(isBackEligible&&backBehavior==='history'&&state.routeKeyHistory.length>1){var routeKey=state.routeKeyHistory[state.routeKeyHistory.length-2];activeChildIndex=order.indexOf(routeKey);}}var didNavigate=false;if(action.type===NavigationActions.NAVIGATE){didNavigate=!!order.find(function(childId,i){if(childId===action.routeName){activeChildIndex=i;return true;}return false;});if(didNavigate){var childState=state.routes[activeChildIndex];var childRouter=childRouters[action.routeName];var newChildState=childState;if(action.action&&childRouter){var childStateUpdate=childRouter.getStateForAction(action.action,childState);if(childStateUpdate){newChildState=childStateUpdate;}}if(action.params){newChildState=_objectSpread(_objectSpread({},newChildState),{},{params:_objectSpread(_objectSpread({},newChildState.params||{}),action.params)});}if(newChildState!==childState){var _routes=_toConsumableArray(state.routes);_routes[activeChildIndex]=newChildState;var nextState=_objectSpread(_objectSpread({},state),{},{routes:_routes,index:activeChildIndex});return getNextState(action,prevState,nextState);}else if(newChildState===childState&&state.index===activeChildIndex&&prevState){return null;}}}if(action.type===NavigationActions.SET_PARAMS){var key=action.key;var lastRoute=state.routes.find(function(route){return route.key===key;});if(lastRoute){var _params2=_objectSpread(_objectSpread({},lastRoute.params),action.params);var _routes2=_toConsumableArray(state.routes);_routes2[state.routes.indexOf(lastRoute)]=_objectSpread(_objectSpread({},lastRoute),{},{params:_params2});return getNextState(action,prevState,_objectSpread(_objectSpread({},state),{},{routes:_routes2}));}}if(activeChildIndex!==state.index){return getNextState(action,prevState,_objectSpread(_objectSpread({},state),{},{index:activeChildIndex}));}else if(didNavigate&&!inputState){return state;}else if(didNavigate){return _objectSpread({},state);}var isActionBackOrPop=action.type===NavigationActions.BACK||action.type===StackActions.POP||action.type===StackActions.POP_TO_TOP;var sendActionToInactiveChildren=!isActionBackOrPop||action.type===NavigationActions.BACK&&action.key!=null;if(sendActionToInactiveChildren){var _index=state.index;var _routes3=state.routes;order.find(function(childId,i){var childRouter=childRouters[childId];if(i===_index){return false;}var childState=_routes3[i];if(childRouter){childState=childRouter.getStateForAction(action,childState);}if(!childState){_index=i;return true;}if(childState!==_routes3[i]){_routes3=_toConsumableArray(_routes3);_routes3[i]=childState;_index=i;return true;}return false;});if(action.preserveFocus){_index=state.index;}if(_index!==state.index||_routes3!==state.routes){return getNextState(action,prevState,_objectSpread(_objectSpread({},state),{},{index:_index,routes:_routes3}));}}return state;},getComponentForState:function getComponentForState(state){var routeName=state.routes[state.index].routeName;invariant(routeName,\"There is no route defined for index \".concat(state.index,\". Check that\\n        that you passed in a navigation state with a valid tab/screen index.\"));var childRouter=childRouters[routeName];if(childRouter){return childRouter.getComponentForState(state.routes[state.index]);}return getScreenForRouteName(routeConfigs,routeName);},getComponentForRouteName:function getComponentForRouteName(routeName){return getScreenForRouteName(routeConfigs,routeName);},getPathAndParamsForState:function getPathAndParamsForState(state){var route=state.routes[state.index];return getPathAndParamsForRoute(route);},getActionForPathAndParams:function getActionForPathAndParams(path,params){return _getActionForPathAndParams(path,params);},getScreenOptions:createConfigGetter(routeConfigs,config.defaultNavigationOptions)};});","map":{"version":3,"sources":["SwitchRouter.js"],"names":["defaultActionCreators","config","validateRouteConfigMap","order","Object","getCustomActionCreators","initialRouteParams","initialRouteName","backBehavior","resetOnBlur","initialRouteIndex","n","childRouters","routeName","screen","getScreenForRouteName","routeConfig","routeConfigs","params","getActionForPathAndParams","createPathParser","initialParams","getParamsForRoute","childRouter","childAction","NavigationActions","key","prevState","nextState","nextRouteKeyHistory","action","keyToAdd","k","routeKeyHistory","possibleNextState","prevRouteName","nextRoutes","resetChildRoute","routes","updateNextStateHistory","initialState","index","initialKey","getActionCreators","getStateForAction","inputState","state","getInitialState","activeChildIndex","route","SwitchActions","getNextState","activeChildLastState","activeChildRouter","activeChildState","isBackEligible","Math","routeKey","didNavigate","childId","childState","newChildState","childStateUpdate","lastRoute","isActionBackOrPop","StackActions","sendActionToInactiveChildren","i","getComponentForState","invariant","getComponentForRouteName","getPathAndParamsForState","getPathAndParamsForRoute","getScreenOptions","createConfigGetter"],"mappings":"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","sourcesContent":["import invariant from '../utils/invariant';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport createConfigGetter from './createConfigGetter';\n\nimport * as NavigationActions from '../NavigationActions';\nimport * as SwitchActions from './SwitchActions';\nimport * as StackActions from './StackActions';\nimport validateRouteConfigMap from './validateRouteConfigMap';\nimport { createPathParser } from './pathUtils';\n\nconst defaultActionCreators = () => ({});\n\nexport default (routeConfigs, config = {}) => {\n  // Fail fast on invalid route definitions\n  validateRouteConfigMap(routeConfigs);\n\n  const order = config.order || Object.keys(routeConfigs);\n\n  const getCustomActionCreators =\n    config.getCustomActionCreators || defaultActionCreators;\n\n  const { initialRouteParams } = config;\n  const initialRouteName = config.initialRouteName || order[0];\n  const backBehavior = config.backBehavior || 'none';\n  const resetOnBlur = config.hasOwnProperty('resetOnBlur')\n    ? config.resetOnBlur\n    : true;\n\n  const initialRouteIndex = order.indexOf(initialRouteName);\n  if (initialRouteIndex === -1) {\n    throw new Error(\n      `Invalid initialRouteName '${initialRouteName}'.` +\n        `Should be one of ${order.map((n) => `\"${n}\"`).join(', ')}`\n    );\n  }\n\n  const childRouters = {};\n  order.forEach((routeName) => {\n    childRouters[routeName] = null;\n    const screen = getScreenForRouteName(routeConfigs, routeName);\n    if (screen.router) {\n      childRouters[routeName] = screen.router;\n    }\n  });\n\n  function getParamsForRoute(routeName, params) {\n    let routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return { ...routeConfig.params, ...params };\n    } else {\n      return params;\n    }\n  }\n\n  const {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams,\n  } = createPathParser(childRouters, routeConfigs, config);\n\n  function resetChildRoute(routeName) {\n    let initialParams =\n      routeName === initialRouteName ? initialRouteParams : null;\n    // note(brentvatne): merging initialRouteParams *on top* of default params\n    // on the route seems incorrect but it's consistent with existing behavior\n    // in stackrouter\n    let params = getParamsForRoute(routeName, initialParams);\n    const childRouter = childRouters[routeName];\n    if (childRouter) {\n      const childAction = NavigationActions.init();\n      return {\n        ...childRouter.getStateForAction(childAction),\n        key: routeName,\n        routeName,\n        ...(params ? { params } : {}),\n      };\n    }\n    return {\n      key: routeName,\n      routeName,\n      ...(params ? { params } : {}),\n    };\n  }\n\n  function getNextState(action, prevState, possibleNextState) {\n    function updateNextStateHistory(prevState, nextState) {\n      if (\n        backBehavior !== 'history' ||\n        (prevState && nextState && nextState.index === prevState.index)\n      ) {\n        return nextState;\n      }\n      let nextRouteKeyHistory = prevState ? prevState.routeKeyHistory : [];\n      if (action.type === NavigationActions.NAVIGATE) {\n        nextRouteKeyHistory = [...nextRouteKeyHistory]; // copy\n        const keyToAdd = nextState.routes[nextState.index].key;\n        nextRouteKeyHistory = nextRouteKeyHistory.filter((k) => k !== keyToAdd); // dedup\n        nextRouteKeyHistory.push(keyToAdd);\n      } else if (action.type === NavigationActions.BACK) {\n        nextRouteKeyHistory = [...nextRouteKeyHistory]; // copy\n        nextRouteKeyHistory.pop();\n      }\n      return {\n        ...nextState,\n        routeKeyHistory: nextRouteKeyHistory,\n      };\n    }\n\n    let nextState = possibleNextState;\n    if (\n      prevState &&\n      possibleNextState &&\n      prevState.index !== possibleNextState.index &&\n      resetOnBlur\n    ) {\n      const prevRouteName = prevState.routes[prevState.index].routeName;\n      const nextRoutes = [...possibleNextState.routes];\n      nextRoutes[prevState.index] = resetChildRoute(prevRouteName);\n      nextState = {\n        ...possibleNextState,\n        routes: nextRoutes,\n      };\n    }\n    return updateNextStateHistory(prevState, nextState);\n  }\n\n  function getInitialState() {\n    const routes = order.map(resetChildRoute);\n    const initialState = {\n      routes,\n      index: initialRouteIndex,\n    };\n\n    if (backBehavior === 'history') {\n      const initialKey = routes[initialRouteIndex].key;\n      initialState['routeKeyHistory'] = [initialKey];\n    }\n    return initialState;\n  }\n\n  return {\n    childRouters,\n\n    getActionCreators(route, stateKey) {\n      return getCustomActionCreators(route, stateKey);\n    },\n\n    getStateForAction(action, inputState) {\n      let prevState = inputState ? { ...inputState } : inputState;\n      let state = inputState || getInitialState();\n      let activeChildIndex = state.index;\n\n      if (action.type === NavigationActions.INIT) {\n        // NOTE(brentvatne): this seems weird... why are we merging these\n        // params into child routes?\n        // ---------------------------------------------------------------\n        // Merge any params from the action into all the child routes\n        const { params } = action;\n        if (params) {\n          state.routes = state.routes.map((route) => ({\n            ...route,\n            params: {\n              ...route.params,\n              ...params,\n              ...(route.routeName === initialRouteName\n                ? initialRouteParams\n                : null),\n            },\n          }));\n        }\n      }\n\n      if (\n        action.type === SwitchActions.JUMP_TO &&\n        (action.key == null || action.key === state.key)\n      ) {\n        const { params } = action;\n        const index = state.routes.findIndex(\n          (route) => route.routeName === action.routeName\n        );\n\n        if (index === -1) {\n          throw new Error(\n            `There is no route named '${action.routeName}' in the navigator with the key '${action.key}'.\\n` +\n              `Must be one of: ${state.routes\n                .map((route) => `'${route.routeName}'`)\n                .join(',')}`\n          );\n        }\n\n        return getNextState(action, prevState, {\n          ...state,\n          routes: params\n            ? state.routes.map((route, i) =>\n                i === index\n                  ? {\n                      ...route,\n                      params: {\n                        ...route.params,\n                        ...params,\n                      },\n                    }\n                  : route\n              )\n            : state.routes,\n          index,\n        });\n      }\n\n      // Let the current child handle it\n      const activeChildLastState = state.routes[state.index];\n      const activeChildRouter = childRouters[order[state.index]];\n      if (activeChildRouter) {\n        const activeChildState = activeChildRouter.getStateForAction(\n          action,\n          activeChildLastState\n        );\n        if (!activeChildState && inputState) {\n          return null;\n        }\n        if (activeChildState && activeChildState !== activeChildLastState) {\n          const routes = [...state.routes];\n          routes[state.index] = activeChildState;\n          return getNextState(action, prevState, {\n            ...state,\n            routes,\n          });\n        }\n      }\n\n      // Handle tab changing. Do this after letting the current tab try to\n      // handle the action, to allow inner children to change first\n      const isBackEligible =\n        action.key == null || action.key === activeChildLastState.key;\n      if (action.type === NavigationActions.BACK) {\n        if (isBackEligible && backBehavior === 'initialRoute') {\n          activeChildIndex = initialRouteIndex;\n        } else if (isBackEligible && backBehavior === 'order') {\n          activeChildIndex = Math.max(0, activeChildIndex - 1);\n        }\n        // The history contains current route, so we can only go back\n        // if there is more than one item in the history\n        else if (\n          isBackEligible &&\n          backBehavior === 'history' &&\n          state.routeKeyHistory.length > 1\n        ) {\n          const routeKey =\n            state.routeKeyHistory[state.routeKeyHistory.length - 2];\n          activeChildIndex = order.indexOf(routeKey);\n        }\n      }\n\n      let didNavigate = false;\n      if (action.type === NavigationActions.NAVIGATE) {\n        didNavigate = !!order.find((childId, i) => {\n          if (childId === action.routeName) {\n            activeChildIndex = i;\n            return true;\n          }\n          return false;\n        });\n        if (didNavigate) {\n          const childState = state.routes[activeChildIndex];\n          const childRouter = childRouters[action.routeName];\n          let newChildState = childState;\n\n          if (action.action && childRouter) {\n            const childStateUpdate = childRouter.getStateForAction(\n              action.action,\n              childState\n            );\n            if (childStateUpdate) {\n              newChildState = childStateUpdate;\n            }\n          }\n\n          if (action.params) {\n            newChildState = {\n              ...newChildState,\n              params: {\n                ...(newChildState.params || {}),\n                ...action.params,\n              },\n            };\n          }\n\n          if (newChildState !== childState) {\n            const routes = [...state.routes];\n            routes[activeChildIndex] = newChildState;\n            const nextState = {\n              ...state,\n              routes,\n              index: activeChildIndex,\n            };\n            return getNextState(action, prevState, nextState);\n          } else if (\n            newChildState === childState &&\n            state.index === activeChildIndex &&\n            prevState\n          ) {\n            return null;\n          }\n        }\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        const key = action.key;\n        const lastRoute = state.routes.find((route) => route.key === key);\n        if (lastRoute) {\n          const params = {\n            ...lastRoute.params,\n            ...action.params,\n          };\n          const routes = [...state.routes];\n          routes[state.routes.indexOf(lastRoute)] = {\n            ...lastRoute,\n            params,\n          };\n          return getNextState(action, prevState, {\n            ...state,\n            routes,\n          });\n        }\n      }\n\n      if (activeChildIndex !== state.index) {\n        return getNextState(action, prevState, {\n          ...state,\n          index: activeChildIndex,\n        });\n      } else if (didNavigate && !inputState) {\n        return state;\n      } else if (didNavigate) {\n        return { ...state };\n      }\n\n      const isActionBackOrPop =\n        action.type === NavigationActions.BACK ||\n        action.type === StackActions.POP ||\n        action.type === StackActions.POP_TO_TOP;\n      const sendActionToInactiveChildren =\n        !isActionBackOrPop ||\n        (action.type === NavigationActions.BACK && action.key != null);\n\n      // Let other children handle it and switch to the first child that returns a new state\n      // Do not do this for StackActions.POP or NavigationActions.BACK actions without a key:\n      // it would be unintuitive for these actions to switch to another tab just because that tab had a Stack that could accept a back action\n      if (sendActionToInactiveChildren) {\n        let index = state.index;\n        let routes = state.routes;\n        order.find((childId, i) => {\n          const childRouter = childRouters[childId];\n          if (i === index) {\n            return false;\n          }\n          let childState = routes[i];\n          if (childRouter) {\n            childState = childRouter.getStateForAction(action, childState);\n          }\n          if (!childState) {\n            index = i;\n            return true;\n          }\n          if (childState !== routes[i]) {\n            routes = [...routes];\n            routes[i] = childState;\n            index = i;\n            return true;\n          }\n          return false;\n        });\n\n        // Nested routers can be updated after switching children with actions such as SET_PARAMS\n        // and COMPLETE_TRANSITION.\n        if (action.preserveFocus) {\n          index = state.index;\n        }\n\n        if (index !== state.index || routes !== state.routes) {\n          return getNextState(action, prevState, {\n            ...state,\n            index,\n            routes,\n          });\n        }\n      }\n\n      return state;\n    },\n\n    getComponentForState(state) {\n      const routeName = state.routes[state.index].routeName;\n      invariant(\n        routeName,\n        `There is no route defined for index ${state.index}. Check that\n        that you passed in a navigation state with a valid tab/screen index.`\n      );\n      const childRouter = childRouters[routeName];\n      if (childRouter) {\n        return childRouter.getComponentForState(state.routes[state.index]);\n      }\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getPathAndParamsForState(state) {\n      const route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n\n    getScreenOptions: createConfigGetter(\n      routeConfigs,\n      config.defaultNavigationOptions\n    ),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}