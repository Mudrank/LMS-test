{"ast":null,"code":"export var BACK='Navigation/BACK';export var INIT='Navigation/INIT';export var NAVIGATE='Navigation/NAVIGATE';export var SET_PARAMS='Navigation/SET_PARAMS';export var back=function back(){var payload=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};return{type:BACK,key:payload.key,immediate:payload.immediate};};export var init=function init(){var payload=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var action={type:INIT};if(payload.params){action.params=payload.params;}return action;};export var navigate=function navigate(payload){var action={type:NAVIGATE,routeName:payload.routeName};if(payload.params){action.params=payload.params;}if(payload.action){action.action=payload.action;}if(payload.key){action.key=payload.key;}return action;};export var setParams=function setParams(payload){return{type:SET_PARAMS,key:payload.key,params:payload.params,preserveFocus:true};};","map":{"version":3,"sources":["NavigationActions.ts"],"names":["BACK","INIT","NAVIGATE","SET_PARAMS","back","payload","type","key","immediate","init","action","navigate","routeName","setParams","params","preserveFocus"],"mappings":"AAmDA,MAAO,IAAMA,CAAAA,IAAI,CAAV,iBAAA,CACP,MAAO,IAAMC,CAAAA,IAAI,CAAV,iBAAA,CACP,MAAO,IAAMC,CAAAA,QAAQ,CAAd,qBAAA,CACP,MAAO,IAAMC,CAAAA,UAAU,CAAhB,uBAAA,CAGP,MAAO,IAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,MAClBC,CAAAA,OADkB,2DAAA,EAAA,OAEQ,CAC1BC,IAAI,CADsB,IAAA,CAE1BC,GAAG,CAAEF,OAAO,CAFc,GAAA,CAG1BG,SAAS,CAAEH,OAAO,CAACG,SAHO,CAFR,EAAb,CAQP,MAAO,IAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,EAA+C,IAA9CJ,CAAAA,OAA8C,2DAA/C,EAA+C,CACjE,GAAMK,CAAAA,MAA4B,CAAG,CACnCJ,IAAI,CAAEL,IAD6B,CAArC,CAGA,GAAII,OAAO,CAAX,MAAA,CAAoB,CAClBK,MAAM,CAANA,MAAAA,CAAgBL,OAAO,CAAvBK,MAAAA,CACD,CACD,MAAA,CAAA,MAAA,CAPK,CAAA,CAUP,MAAO,IAAMC,CAAAA,QAAQ,CACnBN,QADWM,CAAAA,QACXN,CAAAA,OADsB,CAEO,CAC7B,GAAMK,CAAAA,MAAgC,CAAG,CACvCJ,IAAI,CADmC,QAAA,CAEvCM,SAAS,CAAEP,OAAO,CAACO,SAFoB,CAAzC,CAIA,GAAIP,OAAO,CAAX,MAAA,CAAoB,CAClBK,MAAM,CAANA,MAAAA,CAAgBL,OAAO,CAAvBK,MAAAA,CACD,CACD,GAAIL,OAAO,CAAX,MAAA,CAAoB,CAClBK,MAAM,CAANA,MAAAA,CAAgBL,OAAO,CAAvBK,MAAAA,CACD,CACD,GAAIL,OAAO,CAAX,GAAA,CAAiB,CACfK,MAAM,CAANA,GAAAA,CAAaL,OAAO,CAApBK,GAAAA,CACD,CACD,MAAA,CAAA,MAAA,CAhBK,CAAA,CAmBP,MAAO,IAAMG,CAAAA,SAAS,CACpBR,QADWQ,CAAAA,SACXR,CAAAA,OADuB,QAEQ,CAC/BC,IAAI,CAD2B,UAAA,CAE/BC,GAAG,CAAEF,OAAO,CAFmB,GAAA,CAG/BS,MAAM,CAAET,OAAO,CAHgB,MAAA,CAI/BU,aAAa,CAAE,IAJgB,CAFR,EAAlB","sourcesContent":["export interface NavigationParams {\n  [key: string]: any;\n}\n\nexport interface NavigationNavigateActionPayload {\n  routeName: string;\n  params?: NavigationParams;\n\n  // The action to run inside the sub-router\n  action?: NavigationNavigateAction;\n\n  key?: string;\n}\n\nexport interface NavigationNavigateAction\n  extends NavigationNavigateActionPayload {\n  type: 'Navigation/NAVIGATE';\n}\n\nexport interface NavigationBackActionPayload {\n  key?: string | null;\n  immediate?: boolean;\n}\n\nexport interface NavigationBackAction extends NavigationBackActionPayload {\n  type: 'Navigation/BACK';\n}\n\nexport interface NavigationInitActionPayload {\n  params?: NavigationParams;\n}\n\nexport interface NavigationInitAction extends NavigationInitActionPayload {\n  type: 'Navigation/INIT';\n}\n\nexport interface NavigationSetParamsActionPayload {\n  // The key of the route where the params should be set\n  key: string;\n\n  // The new params to merge into the existing route params\n  params?: NavigationParams;\n}\n\nexport interface NavigationSetParamsAction\n  extends NavigationSetParamsActionPayload {\n  type: 'Navigation/SET_PARAMS';\n  preserveFocus: true;\n}\n\n// Action constants\nexport const BACK = 'Navigation/BACK';\nexport const INIT = 'Navigation/INIT';\nexport const NAVIGATE = 'Navigation/NAVIGATE';\nexport const SET_PARAMS = 'Navigation/SET_PARAMS';\n\n// Action creators\nexport const back = (\n  payload: NavigationBackActionPayload = {}\n): NavigationBackAction => ({\n  type: BACK,\n  key: payload.key,\n  immediate: payload.immediate,\n});\n\nexport const init = (payload: NavigationInitActionPayload = {}) => {\n  const action: NavigationInitAction = {\n    type: INIT,\n  };\n  if (payload.params) {\n    action.params = payload.params;\n  }\n  return action;\n};\n\nexport const navigate = (\n  payload: NavigationNavigateActionPayload\n): NavigationNavigateAction => {\n  const action: NavigationNavigateAction = {\n    type: NAVIGATE,\n    routeName: payload.routeName,\n  };\n  if (payload.params) {\n    action.params = payload.params;\n  }\n  if (payload.action) {\n    action.action = payload.action;\n  }\n  if (payload.key) {\n    action.key = payload.key;\n  }\n  return action;\n};\n\nexport const setParams = (\n  payload: NavigationSetParamsActionPayload\n): NavigationSetParamsAction => ({\n  type: SET_PARAMS,\n  key: payload.key,\n  params: payload.params,\n  preserveFocus: true,\n});\n"]},"metadata":{},"sourceType":"module"}