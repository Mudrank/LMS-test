{"ast":null,"code":"import{isValidElementType}from'react-is';import invariant from\"../utils/invariant\";function validateRouteConfigMap(routeConfigs){var routeNames=Object.keys(routeConfigs);invariant(routeNames.length>0,'Please specify at least one route when configuring a navigator.');routeNames.forEach(function(routeName){var routeConfig=routeConfigs[routeName];var screenComponent=getScreenComponent(routeConfig);if(!screenComponent||!isValidElementType(screenComponent)&&!routeConfig.getScreen){throw new Error(\"The component for route '\".concat(routeName,\"' must be a React component. For example:\\n\\nimport MyScreen from './MyScreen';\\n...\\n\").concat(routeName,\": MyScreen,\\n}\\n\\nYou can also use a navigator:\\n\\nimport MyNavigator from './MyNavigator';\\n...\\n\").concat(routeName,\": MyNavigator,\\n}\"));}if(routeConfig.screen&&routeConfig.getScreen){throw new Error(\"Route '\".concat(routeName,\"' should declare a screen or a getScreen, not both.\"));}});}function getScreenComponent(routeConfig){if(!routeConfig){return null;}return routeConfig.screen?routeConfig.screen:routeConfig;}export default validateRouteConfigMap;","map":{"version":3,"sources":["validateRouteConfigMap.js"],"names":["routeNames","Object","invariant","routeName","routeConfig","routeConfigs","screenComponent","getScreenComponent","isValidElementType"],"mappings":"AAAA,OAAA,kBAAA,KAAA,UAAA,CAEA,MAAA,CAAA,SAAA,0BAMA,QAAA,CAAA,sBAAA,CAAA,YAAA,CAA8C,CAC5C,GAAMA,CAAAA,UAAU,CAAGC,MAAM,CAANA,IAAAA,CAAnB,YAAmBA,CAAnB,CACAC,SAAS,CACPF,UAAU,CAAVA,MAAAA,CADO,CAAA,CAATE,iEAAS,CAATA,CAKAF,UAAU,CAAVA,OAAAA,CAAoBG,SAAAA,SAAD,CAAe,CAChC,GAAMC,CAAAA,WAAW,CAAGC,YAAY,CAAhC,SAAgC,CAAhC,CACA,GAAMC,CAAAA,eAAe,CAAGC,kBAAkB,CAA1C,WAA0C,CAA1C,CAEA,GACE,CAAA,eAAA,EACC,CAACC,kBAAkB,CAAnB,eAAmB,CAAnB,EAAwC,CAACJ,WAAW,CAFvD,SAAA,CAGE,CACA,KAAM,IAAA,CAAA,KAAA,CAAA,4BAAA,MAAA,CAAA,SAAA,CAAA,wFAAA,EAAA,MAAA,CAAA,SAAA,CAAA,oGAAA,EAAA,MAAA,CAAA,SAAA,CAAN,mBAAM,CAAA,CAAN,CAaD,CAED,GAAIA,WAAW,CAAXA,MAAAA,EAAsBA,WAAW,CAArC,SAAA,CAAiD,CAC/C,KAAM,IAAA,CAAA,KAAA,CAAA,UAAA,MAAA,CAAA,SAAA,CAAN,qDAAM,CAAA,CAAN,CAGD,CA3BHJ,CAAAA,EA6BD,CAED,QAAA,CAAA,kBAAA,CAAA,WAAA,CAAyC,CACvC,GAAI,CAAJ,WAAA,CAAkB,CAChB,MAAA,KAAA,CACD,CAED,MAAOI,CAAAA,WAAW,CAAXA,MAAAA,CAAqBA,WAAW,CAAhCA,MAAAA,CAAP,WAAA,CACD,CAED,cAAA,CAAA,sBAAA","sourcesContent":["import { isValidElementType } from 'react-is';\n\nimport invariant from '../utils/invariant';\n\n/**\n * Make sure the config passed e.g. to StackRouter, TabRouter has\n * the correct format, and throw a clear error if it doesn't.\n */\nfunction validateRouteConfigMap(routeConfigs) {\n  const routeNames = Object.keys(routeConfigs);\n  invariant(\n    routeNames.length > 0,\n    'Please specify at least one route when configuring a navigator.'\n  );\n\n  routeNames.forEach((routeName) => {\n    const routeConfig = routeConfigs[routeName];\n    const screenComponent = getScreenComponent(routeConfig);\n\n    if (\n      !screenComponent ||\n      (!isValidElementType(screenComponent) && !routeConfig.getScreen)\n    ) {\n      throw new Error(`The component for route '${routeName}' must be a React component. For example:\n\nimport MyScreen from './MyScreen';\n...\n${routeName}: MyScreen,\n}\n\nYou can also use a navigator:\n\nimport MyNavigator from './MyNavigator';\n...\n${routeName}: MyNavigator,\n}`);\n    }\n\n    if (routeConfig.screen && routeConfig.getScreen) {\n      throw new Error(\n        `Route '${routeName}' should declare a screen or a getScreen, not both.`\n      );\n    }\n  });\n}\n\nfunction getScreenComponent(routeConfig) {\n  if (!routeConfig) {\n    return null;\n  }\n\n  return routeConfig.screen ? routeConfig.screen : routeConfig;\n}\n\nexport default validateRouteConfigMap;\n"]},"metadata":{},"sourceType":"module"}