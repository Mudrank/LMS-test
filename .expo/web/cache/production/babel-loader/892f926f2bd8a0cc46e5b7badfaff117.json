{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}import React,{PureComponent}from'react';import PropTypes from'prop-types';import{NativeModules,Platform,PixelRatio,processColor,Text}from\"./react-native\";import ensureNativeModuleAvailable from\"./ensure-native-module-available\";import createIconSourceCache from\"./create-icon-source-cache\";import createIconButtonComponent from\"./icon-button\";import createTabBarItemIOSComponent from\"./tab-bar-item-ios\";export var NativeIconAPI=NativeModules.RNVectorIconsManager||NativeModules.RNVectorIconsModule;export var DEFAULT_ICON_SIZE=12;export var DEFAULT_ICON_COLOR='black';export default function createIconSet(glyphMap,fontFamily,fontFile,fontStyle){var fontBasename=fontFile?fontFile.replace(/\\.(otf|ttf)$/,''):fontFamily;var fontReference=Platform.select({windows:\"/Assets/\"+fontFile+\"#\"+fontFamily,android:fontBasename,web:fontBasename,default:fontFamily});var Icon=function(_PureComponent){_inherits(Icon,_PureComponent);var _super=_createSuper(Icon);function Icon(){var _this;_classCallCheck(this,Icon);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.root=null;_this.handleRef=function(ref){_this.root=ref;};return _this;}_createClass(Icon,[{key:\"setNativeProps\",value:function setNativeProps(nativeProps){if(this.root){this.root.setNativeProps(nativeProps);}}},{key:\"render\",value:function render(){var _this$props=this.props,name=_this$props.name,size=_this$props.size,color=_this$props.color,style=_this$props.style,children=_this$props.children,props=_objectWithoutProperties(_this$props,[\"name\",\"size\",\"color\",\"style\",\"children\"]);var glyph=name?glyphMap[name]||'?':'';if(typeof glyph==='number'){glyph=String.fromCodePoint(glyph);}var styleDefaults={fontSize:size,color:color};var styleOverrides={fontFamily:fontReference,fontWeight:'normal',fontStyle:'normal'};props.style=[styleDefaults,style,styleOverrides,fontStyle||{}];props.ref=this.handleRef;return React.createElement(Text,props,glyph,children);}}]);return Icon;}(PureComponent);Icon.defaultProps={size:DEFAULT_ICON_SIZE,allowFontScaling:false};var imageSourceCache=createIconSourceCache();function resolveGlyph(name){var glyph=glyphMap[name]||'?';if(typeof glyph==='number'){return String.fromCodePoint(glyph);}return glyph;}function getImageSourceSync(name){var size=arguments.length>1&&arguments[1]!==undefined?arguments[1]:DEFAULT_ICON_SIZE;var color=arguments.length>2&&arguments[2]!==undefined?arguments[2]:DEFAULT_ICON_COLOR;ensureNativeModuleAvailable();var glyph=resolveGlyph(name);var processedColor=processColor(color);var cacheKey=glyph+\":\"+size+\":\"+processedColor;if(imageSourceCache.has(cacheKey)){return imageSourceCache.get(cacheKey);}try{var imagePath=NativeIconAPI.getImageForFontSync(fontReference,glyph,size,processedColor);var value={uri:imagePath,scale:PixelRatio.get()};imageSourceCache.setValue(cacheKey,value);return value;}catch(error){imageSourceCache.setError(cacheKey,error);throw error;}}function getImageSource(name){var size,color,glyph,processedColor,cacheKey,imagePath,value,_args=arguments;return _regeneratorRuntime.async(function getImageSource$(_context){while(1){switch(_context.prev=_context.next){case 0:size=_args.length>1&&_args[1]!==undefined?_args[1]:DEFAULT_ICON_SIZE;color=_args.length>2&&_args[2]!==undefined?_args[2]:DEFAULT_ICON_COLOR;ensureNativeModuleAvailable();glyph=resolveGlyph(name);processedColor=processColor(color);cacheKey=glyph+\":\"+size+\":\"+processedColor;if(!imageSourceCache.has(cacheKey)){_context.next=8;break;}return _context.abrupt(\"return\",imageSourceCache.get(cacheKey));case 8:_context.prev=8;_context.next=11;return _regeneratorRuntime.awrap(NativeIconAPI.getImageForFont(fontReference,glyph,size,processedColor));case 11:imagePath=_context.sent;value={uri:imagePath,scale:PixelRatio.get()};imageSourceCache.setValue(cacheKey,value);return _context.abrupt(\"return\",value);case 17:_context.prev=17;_context.t0=_context[\"catch\"](8);imageSourceCache.setError(cacheKey,_context.t0);throw _context.t0;case 21:case\"end\":return _context.stop();}}},null,null,[[8,17]],Promise);}function loadFont(){var file,_args2=arguments;return _regeneratorRuntime.async(function loadFont$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:file=_args2.length>0&&_args2[0]!==undefined?_args2[0]:fontFile;if(!(Platform.OS==='ios')){_context2.next=7;break;}ensureNativeModuleAvailable();if(file){_context2.next=5;break;}throw new Error('Unable to load font, because no file was specified. ');case 5:_context2.next=7;return _regeneratorRuntime.awrap(NativeIconAPI.loadFontWithFileName.apply(NativeIconAPI,_toConsumableArray(file.split('.'))));case 7:case\"end\":return _context2.stop();}}},null,null,null,Promise);}function hasIcon(name){return Object.prototype.hasOwnProperty.call(glyphMap,name);}function getRawGlyphMap(){return glyphMap;}function getFontFamily(){return fontReference;}Icon.Button=createIconButtonComponent(Icon);Icon.TabBarItemIOS=Icon.TabBarItem;Icon.getImageSource=getImageSource;Icon.getImageSourceSync=getImageSourceSync;Icon.loadFont=loadFont;Icon.hasIcon=hasIcon;Icon.getRawGlyphMap=getRawGlyphMap;Icon.getFontFamily=getFontFamily;return Icon;}","map":{"version":3,"sources":["C:/Users/Mudrank Gupta/OneDrive/WHJR/Pro/Wireless-Library-management/node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/lib/create-icon-set.js"],"names":["React","PureComponent","PropTypes","NativeModules","Platform","PixelRatio","processColor","Text","ensureNativeModuleAvailable","createIconSourceCache","createIconButtonComponent","createTabBarItemIOSComponent","NativeIconAPI","RNVectorIconsManager","RNVectorIconsModule","DEFAULT_ICON_SIZE","DEFAULT_ICON_COLOR","createIconSet","glyphMap","fontFamily","fontFile","fontStyle","fontBasename","replace","fontReference","select","windows","android","web","default","Icon","root","handleRef","ref","nativeProps","setNativeProps","props","name","size","color","style","children","glyph","String","fromCodePoint","styleDefaults","fontSize","styleOverrides","fontWeight","defaultProps","allowFontScaling","imageSourceCache","resolveGlyph","getImageSourceSync","processedColor","cacheKey","has","get","imagePath","getImageForFontSync","value","uri","scale","setValue","error","setError","getImageSource","getImageForFont","loadFont","file","OS","Error","loadFontWithFileName","split","hasIcon","Object","prototype","hasOwnProperty","call","getRawGlyphMap","getFontFamily","Button","TabBarItemIOS","TabBarItem"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  NativeModules,\n  Platform,\n  PixelRatio,\n  processColor,\n  Text,\n} from './react-native';\n\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\nimport createIconSourceCache from './create-icon-source-cache';\nimport createIconButtonComponent from './icon-button';\nimport createTabBarItemIOSComponent from './tab-bar-item-ios';\n\nexport const NativeIconAPI =\n  NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\n\nexport const DEFAULT_ICON_SIZE = 12;\nexport const DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(\n  glyphMap,\n  fontFamily,\n  fontFile,\n  fontStyle\n) {\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  const fontBasename = fontFile\n    ? fontFile.replace(/\\.(otf|ttf)$/, '')\n    : fontFamily;\n\n  const fontReference = Platform.select({\n    windows: `/Assets/${fontFile}#${fontFamily}`,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily,\n  });\n\n  class Icon extends PureComponent {\n    root = null;\n\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false,\n    };\n\n    setNativeProps(nativeProps) {\n      if (this.root) {\n        this.root.setNativeProps(nativeProps);\n      }\n    }\n\n    handleRef = ref => {\n      this.root = ref;\n    };\n\n    render() {\n      const { name, size, color, style, children, ...props } = this.props;\n\n      let glyph = name ? glyphMap[name] || '?' : '';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCodePoint(glyph);\n      }\n\n      const styleDefaults = {\n        fontSize: size,\n        color,\n      };\n\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n      };\n\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n      props.ref = this.handleRef;\n\n      return (\n        <Text {...props}>\n          {glyph}\n          {children}\n        </Text>\n      );\n    }\n  }\n\n  const imageSourceCache = createIconSourceCache();\n\n  function resolveGlyph(name) {\n    const glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      return String.fromCodePoint(glyph);\n    }\n    return glyph;\n  }\n\n  function getImageSourceSync(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = NativeIconAPI.getImageForFontSync(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = await NativeIconAPI.getImageForFont(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function loadFont(file = fontFile) {\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n      if (!file) {\n        throw new Error('Unable to load font, because no file was specified. ');\n      }\n      await NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.TabBarItemIOS = Icon.TabBarItem;\n  Icon.getImageSource = getImageSource;\n  Icon.getImageSourceSync = getImageSourceSync;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n\n  return Icon;\n}\n"]},"metadata":{},"sourceType":"module"}