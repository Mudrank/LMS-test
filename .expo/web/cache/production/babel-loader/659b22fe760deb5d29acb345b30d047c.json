{"ast":null,"code":"import{PermissionStatus}from'unimodules-permissions-interface';export var CameraType;(function(CameraType){CameraType[\"front\"]=\"front\";CameraType[\"back\"]=\"back\";})(CameraType||(CameraType={}));export var FlashMode;(function(FlashMode){FlashMode[\"on\"]=\"on\";FlashMode[\"off\"]=\"off\";FlashMode[\"auto\"]=\"auto\";FlashMode[\"torch\"]=\"torch\";})(FlashMode||(FlashMode={}));export var AutoFocus;(function(AutoFocus){AutoFocus[\"on\"]=\"on\";AutoFocus[\"off\"]=\"off\";AutoFocus[\"auto\"]=\"auto\";AutoFocus[\"singleShot\"]=\"singleShot\";})(AutoFocus||(AutoFocus={}));export var WhiteBalance;(function(WhiteBalance){WhiteBalance[\"auto\"]=\"auto\";WhiteBalance[\"sunny\"]=\"sunny\";WhiteBalance[\"cloudy\"]=\"cloudy\";WhiteBalance[\"shadow\"]=\"shadow\";WhiteBalance[\"incandescent\"]=\"incandescent\";WhiteBalance[\"fluorescent\"]=\"fluorescent\";WhiteBalance[\"continuous\"]=\"continuous\";WhiteBalance[\"manual\"]=\"manual\";})(WhiteBalance||(WhiteBalance={}));export var ImageType;(function(ImageType){ImageType[\"png\"]=\"png\";ImageType[\"jpg\"]=\"jpg\";})(ImageType||(ImageType={}));export{PermissionStatus};","map":{"version":3,"sources":["../src/Camera.types.ts"],"names":[],"mappings":"AACA,OAEE,gBAFF,KAIO,kCAJP,CAMA,MAAA,IAAY,CAAA,UAAZ,CAAA,CAAA,SAAY,UAAZ,CAAsB,CAIpB,UAAA,CAAA,OAAA,CAAA,CAAA,OAAA,CAIA,UAAA,CAAA,MAAA,CAAA,CAAA,MAAA,CACD,CATD,EAAY,UAAU,GAAV,UAAU,CAAA,EAAA,CAAtB,EAWA,MAAA,IAAY,CAAA,SAAZ,CAAA,CAAA,SAAY,SAAZ,CAAqB,CAInB,SAAA,CAAA,IAAA,CAAA,CAAA,IAAA,CAIA,SAAA,CAAA,KAAA,CAAA,CAAA,KAAA,CAIA,SAAA,CAAA,MAAA,CAAA,CAAA,MAAA,CAIA,SAAA,CAAA,OAAA,CAAA,CAAA,OAAA,CACD,CAjBD,EAAY,SAAS,GAAT,SAAS,CAAA,EAAA,CAArB,EAmBA,MAAA,IAAY,CAAA,SAAZ,CAAA,CAAA,SAAY,SAAZ,CAAqB,CAInB,SAAA,CAAA,IAAA,CAAA,CAAA,IAAA,CAIA,SAAA,CAAA,KAAA,CAAA,CAAA,KAAA,CAIA,SAAA,CAAA,MAAA,CAAA,CAAA,MAAA,CAIA,SAAA,CAAA,YAAA,CAAA,CAAA,YAAA,CACD,CAjBD,EAAY,SAAS,GAAT,SAAS,CAAA,EAAA,CAArB,EAmBA,MAAA,IAAY,CAAA,YAAZ,CAAA,CAAA,SAAY,YAAZ,CAAwB,CAItB,YAAA,CAAA,MAAA,CAAA,CAAA,MAAA,CAIA,YAAA,CAAA,OAAA,CAAA,CAAA,OAAA,CAIA,YAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAIA,YAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAIA,YAAA,CAAA,cAAA,CAAA,CAAA,cAAA,CAIA,YAAA,CAAA,aAAA,CAAA,CAAA,aAAA,CAIA,YAAA,CAAA,YAAA,CAAA,CAAA,YAAA,CAIA,YAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CACD,CAjCD,EAAY,YAAY,GAAZ,YAAY,CAAA,EAAA,CAAxB,EAmCA,MAAA,IAAY,CAAA,SAAZ,CAAA,CAAA,SAAY,SAAZ,CAAqB,CACnB,SAAA,CAAA,KAAA,CAAA,CAAA,KAAA,CACA,SAAA,CAAA,KAAA,CAAA,CAAA,KAAA,CACD,CAHD,EAAY,SAAS,GAAT,SAAS,CAAA,EAAA,CAArB,EA2LA,OAA6B,gBAA7B","sourcesContent":["import { ViewProps } from 'react-native';\nimport {\n  PermissionResponse,\n  PermissionStatus,\n  PermissionExpiration,\n} from 'unimodules-permissions-interface';\n\nexport enum CameraType {\n  /**\n   * @platforms ios, android, web\n   */\n  front = 'front',\n  /**\n   * @platforms ios, android, web\n   */\n  back = 'back',\n}\n\nexport enum FlashMode {\n  /**\n   * @platforms ios, android, web\n   */\n  on = 'on',\n  /**\n   * @platforms ios, android, web\n   */\n  off = 'off',\n  /**\n   * @platforms ios, android, web\n   */\n  auto = 'auto',\n  /**\n   * @platforms ios, android, web\n   */\n  torch = 'torch',\n}\n\nexport enum AutoFocus {\n  /**\n   * @platforms ios, android, web\n   */\n  on = 'on',\n  /**\n   * @platforms ios, android, web\n   */\n  off = 'off',\n  /**\n   * @platforms web\n   */\n  auto = 'auto',\n  /**\n   * @platforms web\n   */\n  singleShot = 'singleShot',\n}\n\nexport enum WhiteBalance {\n  /**\n   * @platforms ios, android, web\n   */\n  auto = 'auto',\n  /**\n   * @platforms ios, android\n   */\n  sunny = 'sunny',\n  /**\n   * @platforms ios, android\n   */\n  cloudy = 'cloudy',\n  /**\n   * @platforms ios, android\n   */\n  shadow = 'shadow',\n  /**\n   * @platforms ios, android\n   */\n  incandescent = 'incandescent',\n  /**\n   * @platforms ios, android\n   */\n  fluorescent = 'fluorescent',\n  /**\n   * @platforms web\n   */\n  continuous = 'continuous',\n  /**\n   * @platforms web\n   */\n  manual = 'manual',\n}\n\nexport enum ImageType {\n  png = 'png',\n  jpg = 'jpg',\n}\n\nexport type ImageParameters = {\n  imageType: ImageType;\n  quality: number | null;\n};\n\nexport type ImageSize = {\n  width: number;\n  height: number;\n};\n\nexport type WebCameraSettings = Partial<{\n  autoFocus: string;\n  flashMode: string;\n  whiteBalance: string;\n  exposureCompensation: number;\n  colorTemperature: number;\n  iso: number;\n  brightness: number;\n  contrast: number;\n  saturation: number;\n  sharpness: number;\n  focusDistance: number;\n  zoom: number;\n}>;\n\nexport type CapturedPicture = {\n  width: number;\n  height: number;\n  uri: string;\n  base64?: string;\n  // note(bacon): The types are currently only defined for web.\n  exif?: Partial<MediaTrackSettings>;\n};\n\nexport type CameraPictureOptions = {\n  quality?: number;\n  base64?: boolean;\n  exif?: boolean;\n  onPictureSaved?: (picture: CameraCapturedPicture) => void;\n  // TODO(Bacon): Is it possible to implement this in the browser?\n  skipProcessing?: boolean;\n  // Web-only\n  scale?: number;\n  imageType?: ImageType;\n  isImageMirror?: boolean;\n  // internal\n  id?: number;\n  fastMode?: boolean;\n};\n\nexport type CameraRecordingOptions = {\n  maxDuration?: number;\n  maxFileSize?: number;\n  quality?: number | string;\n  mute?: boolean;\n  mirror?: boolean;\n  // Android\n  videoBitrate?: number;\n};\n\nexport type CameraCapturedPicture = {\n  width: number;\n  height: number;\n  uri: string;\n  base64?: string;\n  exif?: any;\n};\n\nexport type PictureSavedListener = (event: {\n  nativeEvent: { data: CapturedPicture; id: number };\n}) => void;\n\nexport type CameraReadyListener = () => void;\n\nexport type MountErrorListener = (event: { nativeEvent: CameraMountError }) => void;\n\nexport type CameraMountError = { message: string };\n\ntype Point = {\n  x: number;\n  y: number;\n};\n\nexport type BarCodePoint = Point;\n\nexport type BarCodeScanningResult = {\n  type: string;\n  data: string;\n  /** @platform web */\n  cornerPoints?: BarCodePoint[];\n};\n\nexport type Face = {\n  faceID: number;\n  bounds: {\n    origin: Point;\n    size: {\n      height: number;\n      width: number;\n    };\n  };\n  rollAngle: number;\n  yawAngle: number;\n  smilingProbability: number;\n  leftEarPosition: Point;\n  rightEarPosition: Point;\n  leftEyePosition: Point;\n  leftEyeOpenProbability: number;\n  rightEyePosition: Point;\n  rightEyeOpenProbability: number;\n  leftCheekPosition: Point;\n  rightCheekPosition: Point;\n  mouthPosition: Point;\n  leftMouthPosition: Point;\n  rightMouthPosition: Point;\n  noseBasePosition: Point;\n};\n\nexport type FaceDetectionResult = { faces: Face[] };\n\nexport type ConstantsType = {\n  Type: typeof CameraType;\n  FlashMode: typeof FlashMode;\n  AutoFocus: typeof AutoFocus;\n  WhiteBalance: typeof WhiteBalance;\n  VideoQuality: any;\n  VideoStabilization: any;\n};\n\nexport type CameraProps = ViewProps & {\n  type?: number | keyof typeof CameraType;\n  flashMode?: number | keyof typeof FlashMode;\n  whiteBalance?: number | keyof typeof WhiteBalance;\n  autoFocus?: boolean | number | keyof typeof AutoFocus;\n  zoom?: number;\n  ratio?: string;\n  focusDepth?: number;\n  onCameraReady?: Function;\n  useCamera2Api?: boolean;\n  pictureSize?: string;\n  videoStabilizationMode?: number;\n  onMountError?: (event: CameraMountError) => void;\n  barCodeScannerSettings?: object;\n  onBarCodeScanned?: (scanningResult: BarCodeScanningResult) => void;\n  faceDetectorSettings?: object;\n  onFacesDetected?: (faces: FaceDetectionResult) => void;\n  poster?: string;\n};\n\nexport type CameraNativeProps = {\n  pointerEvents?: any;\n  style?: any;\n  ref?: Function;\n  onCameraReady?: CameraReadyListener;\n  onMountError?: MountErrorListener;\n  onBarCodeScanned?: (event: { nativeEvent: BarCodeScanningResult }) => void;\n  onFacesDetected?: (event: { nativeEvent: FaceDetectionResult }) => void;\n  onFaceDetectionError?: (event: { nativeEvent: Error }) => void;\n  onPictureSaved?: PictureSavedListener;\n  type?: number | string;\n  flashMode?: number | string;\n  autoFocus?: string | boolean | number;\n  focusDepth?: number;\n  zoom?: number;\n  whiteBalance?: number | string;\n  pictureSize?: string;\n  barCodeScannerSettings?: BarCodeSettings;\n  faceDetectorSettings?: object;\n  barCodeScannerEnabled?: boolean;\n  faceDetectorEnabled?: boolean;\n  // Android\n  ratio?: string;\n  useCamera2Api?: boolean;\n  // Web\n  poster?: string;\n};\n\nexport type BarCodeSettings = {\n  barCodeTypes: string[];\n  interval?: number;\n};\n\nexport { PermissionResponse, PermissionStatus, PermissionExpiration };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}