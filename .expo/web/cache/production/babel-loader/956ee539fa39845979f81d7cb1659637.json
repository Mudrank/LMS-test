{"ast":null,"code":"var validateFormat=function validateFormat(){};if(process.env.NODE_ENV!=='production'){validateFormat=function validateFormat(format){if(format===undefined){throw new Error('invariant requires an error message argument');}};}function invariant(condition,format){for(var _len=arguments.length,args=new Array(_len>2?_len-2:0),_key=2;_key<_len;_key++){args[_key-2]=arguments[_key];}validateFormat(format);if(!condition){var error;if(format===undefined){error=new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');}else{var argIndex=0;error=new Error(format.replace(/%s/g,function(){return args[argIndex++];}));error.name='Invariant Violation';}error.framesToPop=1;throw error;}}export default invariant;","map":{"version":3,"sources":["invariant.ts"],"names":["validateFormat","process","format","error","argIndex","args"],"mappings":"AAWA,GAAIA,CAAAA,cAAyC,CAAG,yBAAY,CAA5D,CAAA,CAEA,GAAIC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,GAAJ,YAAA,CAA2C,CACzCD,cAAc,CAAG,wBAAA,MAAA,CAA2B,CAC1C,GAAIE,MAAM,GAAV,SAAA,CAA0B,CACxB,KAAM,IAAA,CAAA,KAAA,CAAN,8CAAM,CAAN,CACD,CAHHF,CAAAA,CAKD,CAED,QAAA,CAAA,SAAA,CAAA,SAAA,CAAA,MAAA,CAAwE,+BAAxE,IAAwE,qDAAxE,IAAwE,0BACtEA,cAAc,CAAdA,MAAc,CAAdA,CAEA,GAAI,CAAJ,SAAA,CAAgB,CACd,GAAA,CAAA,KAAA,CACA,GAAIE,MAAM,GAAV,SAAA,CAA0B,CACxBC,KAAK,CAAG,GAAA,CAAA,KAAA,CAARA,+HAAQ,CAARA,CADF,CAAA,IAIO,CACL,GAAIC,CAAAA,QAAQ,CAAZ,CAAA,CACAD,KAAK,CAAG,GAAA,CAAA,KAAA,CAAUD,MAAM,CAANA,OAAAA,CAAAA,KAAAA,CAAsB,iBAAMG,CAAAA,IAAI,CAACD,QAAnDD,EAAkD,CAAV,EAAtBD,CAAV,CAARC,CACAA,KAAK,CAALA,IAAAA,CAAAA,qBAAAA,CACD,CAEDA,KAAK,CAALA,WAAAA,CAZc,CAYdA,CACA,KAAA,CAAA,KAAA,CACD,CACF,CAED,cAAA,CAAA,SAAA","sourcesContent":["/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nlet validateFormat: (format?: string) => void = function () {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function (format?: string) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition: boolean, format?: string, ...args: any[]) {\n  validateFormat(format);\n\n  if (!condition) {\n    let error: Error & { framesToPop?: number };\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.'\n      );\n    } else {\n      let argIndex = 0;\n      error = new Error(format.replace(/%s/g, () => args[argIndex++]));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nexport default invariant;\n"]},"metadata":{},"sourceType":"module"}