{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { UnavailabilityError } from '@unimodules/core';\nimport mapValues from 'lodash/mapValues';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport { PermissionStatus } from 'unimodules-permissions-interface';\nimport ExpoBarCodeScannerModule from \"./ExpoBarCodeScannerModule\";\nimport ExpoBarCodeScannerView from \"./ExpoBarCodeScannerView\";\nvar BarCodeType = ExpoBarCodeScannerModule.BarCodeType,\n    Type = ExpoBarCodeScannerModule.Type;\nvar EVENT_THROTTLE_MS = 500;\nexport { PermissionStatus };\n\nvar BarCodeScanner = function () {\n  var BarCodeScanner = function (_React$Component) {\n    _inherits(BarCodeScanner, _React$Component);\n\n    var _super = _createSuper(BarCodeScanner);\n\n    function BarCodeScanner() {\n      var _this;\n\n      _classCallCheck(this, BarCodeScanner);\n\n      _this = _super.apply(this, arguments);\n      _this.lastEvents = {};\n      _this.lastEventsTimes = {};\n\n      _this.onObjectDetected = function (callback) {\n        return function (_ref) {\n          var nativeEvent = _ref.nativeEvent;\n          var type = nativeEvent.type;\n\n          if (_this.lastEvents[type] && _this.lastEventsTimes[type] && JSON.stringify(nativeEvent) === _this.lastEvents[type] && Date.now() - _this.lastEventsTimes[type] < EVENT_THROTTLE_MS) {\n            return;\n          }\n\n          if (callback) {\n            callback(nativeEvent);\n            _this.lastEventsTimes[type] = new Date();\n            _this.lastEvents[type] = JSON.stringify(nativeEvent);\n          }\n        };\n      };\n\n      return _this;\n    }\n\n    _createClass(BarCodeScanner, [{\n      key: \"render\",\n      value: function render() {\n        var nativeProps = this.convertNativeProps(this.props);\n        var onBarCodeScanned = this.props.onBarCodeScanned;\n        return React.createElement(ExpoBarCodeScannerView, _extends({}, nativeProps, {\n          onBarCodeScanned: this.onObjectDetected(onBarCodeScanned)\n        }));\n      }\n    }, {\n      key: \"convertNativeProps\",\n      value: function convertNativeProps(props) {\n        var newProps = mapValues(props, this.convertProp);\n        return newProps;\n      }\n    }, {\n      key: \"convertProp\",\n      value: function convertProp(value, key) {\n        if (typeof value === 'string' && BarCodeScanner.ConversionTables[key]) {\n          return BarCodeScanner.ConversionTables[key][value];\n        }\n\n        return value;\n      }\n    }], [{\n      key: \"getPermissionsAsync\",\n      value: function getPermissionsAsync() {\n        return _regeneratorRuntime.async(function getPermissionsAsync$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", ExpoBarCodeScannerModule.getPermissionsAsync());\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    }, {\n      key: \"requestPermissionsAsync\",\n      value: function requestPermissionsAsync() {\n        return _regeneratorRuntime.async(function requestPermissionsAsync$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", ExpoBarCodeScannerModule.requestPermissionsAsync());\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    }, {\n      key: \"scanFromURLAsync\",\n      value: function scanFromURLAsync(url) {\n        var barCodeTypes,\n            _args3 = arguments;\n        return _regeneratorRuntime.async(function scanFromURLAsync$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                barCodeTypes = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : Object.values(BarCodeType);\n\n                if (ExpoBarCodeScannerModule.scanFromURLAsync) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                throw new UnavailabilityError('expo-barcode-scanner', 'scanFromURLAsync');\n\n              case 3:\n                if (!(Array.isArray(barCodeTypes) && !barCodeTypes.length)) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                throw new Error('No barCodeTypes specified; provide at least one barCodeType for scanner');\n\n              case 5:\n                if (!(Platform.OS === 'ios')) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                if (!(Array.isArray(barCodeTypes) && !barCodeTypes.includes(BarCodeType.qr))) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');\n\n              case 8:\n                _context3.next = 10;\n                return _regeneratorRuntime.awrap(ExpoBarCodeScannerModule.scanFromURLAsync(url, [BarCodeType.qr]));\n\n              case 10:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 11:\n                _context3.next = 13;\n                return _regeneratorRuntime.awrap(ExpoBarCodeScannerModule.scanFromURLAsync(url, barCodeTypes));\n\n              case 13:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    }]);\n\n    return BarCodeScanner;\n  }(React.Component);\n\n  BarCodeScanner.Constants = {\n    BarCodeType: BarCodeType,\n    Type: Type\n  };\n  BarCodeScanner.ConversionTables = {\n    type: Type\n  };\n  BarCodeScanner.propTypes = _objectSpread(_objectSpread({}, ViewPropTypes), {}, {\n    onBarCodeScanned: PropTypes.func,\n    barCodeTypes: PropTypes.array,\n    type: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n  });\n  BarCodeScanner.defaultProps = {\n    type: Type.back,\n    barCodeTypes: Object.values(BarCodeType)\n  };\n  return BarCodeScanner;\n}();\n\nexport { BarCodeScanner };\nvar Constants = BarCodeScanner.Constants,\n    getPermissionsAsync = BarCodeScanner.getPermissionsAsync,\n    requestPermissionsAsync = BarCodeScanner.requestPermissionsAsync;\nexport { Constants, getPermissionsAsync, requestPermissionsAsync };","map":{"version":3,"sources":["../src/BarCodeScanner.tsx"],"names":[],"mappings":"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","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport mapValues from 'lodash/mapValues';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Platform, ViewProps, ViewPropTypes } from 'react-native';\nimport { PermissionResponse, PermissionStatus } from 'unimodules-permissions-interface';\n\nimport ExpoBarCodeScannerModule from './ExpoBarCodeScannerModule';\nimport ExpoBarCodeScannerView from './ExpoBarCodeScannerView';\n\nconst { BarCodeType, Type } = ExpoBarCodeScannerModule;\n\nconst EVENT_THROTTLE_MS = 500;\n\nexport type BarCodeEvent = {\n  type: string;\n  data: string;\n  [key: string]: any;\n};\n\nexport type BarCodeEventCallbackArguments = {\n  nativeEvent: BarCodeEvent;\n};\n\nexport type BarCodeScannedCallback = (params: BarCodeEvent) => void;\n\nexport { PermissionResponse, PermissionStatus };\n\nexport interface BarCodeScannerProps extends ViewProps {\n  type?: 'front' | 'back' | number;\n  barCodeTypes?: string[];\n  onBarCodeScanned: BarCodeScannedCallback;\n}\n\nexport class BarCodeScanner extends React.Component<BarCodeScannerProps> {\n  lastEvents: { [key: string]: any } = {};\n  lastEventsTimes: { [key: string]: any } = {};\n\n  static Constants = {\n    BarCodeType,\n    Type,\n  };\n\n  static ConversionTables = {\n    type: Type,\n  };\n\n  static propTypes = {\n    ...ViewPropTypes,\n    onBarCodeScanned: PropTypes.func,\n    barCodeTypes: PropTypes.array,\n    type: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  };\n\n  static defaultProps = {\n    type: Type.back,\n    barCodeTypes: Object.values(BarCodeType),\n  };\n\n  static async getPermissionsAsync(): Promise<PermissionResponse> {\n    return ExpoBarCodeScannerModule.getPermissionsAsync();\n  }\n\n  static async requestPermissionsAsync(): Promise<PermissionResponse> {\n    return ExpoBarCodeScannerModule.requestPermissionsAsync();\n  }\n\n  static async scanFromURLAsync(\n    url: string,\n    barCodeTypes: string[] = Object.values(BarCodeType)\n  ): Promise<{ type: string; data: string }> {\n    if (!ExpoBarCodeScannerModule.scanFromURLAsync) {\n      throw new UnavailabilityError('expo-barcode-scanner', 'scanFromURLAsync');\n    }\n    if (Array.isArray(barCodeTypes) && !barCodeTypes.length) {\n      throw new Error('No barCodeTypes specified; provide at least one barCodeType for scanner');\n    }\n\n    if (Platform.OS === 'ios') {\n      if (Array.isArray(barCodeTypes) && !barCodeTypes.includes(BarCodeType.qr)) {\n        // Only QR type is supported on iOS, fail if one tries to use other types\n        throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');\n      }\n      // on iOS use only supported QR type\n      return await ExpoBarCodeScannerModule.scanFromURLAsync(url, [BarCodeType.qr]);\n    }\n\n    // On other platforms, if barCodeTypes is not provided, use all available types\n    return await ExpoBarCodeScannerModule.scanFromURLAsync(url, barCodeTypes);\n  }\n\n  render() {\n    const nativeProps = this.convertNativeProps(this.props);\n    const { onBarCodeScanned } = this.props;\n    return (\n      <ExpoBarCodeScannerView\n        {...nativeProps}\n        onBarCodeScanned={this.onObjectDetected(onBarCodeScanned)}\n      />\n    );\n  }\n\n  // coordinates of cornerPoints and boundingBox are represented in DP (Display-Indepent Points) unit\n  // React Native is using the same unit\n  onObjectDetected = (callback?: BarCodeScannedCallback) => ({\n    nativeEvent,\n  }: BarCodeEventCallbackArguments) => {\n    const { type } = nativeEvent;\n    if (\n      this.lastEvents[type] &&\n      this.lastEventsTimes[type] &&\n      JSON.stringify(nativeEvent) === this.lastEvents[type] &&\n      Date.now() - this.lastEventsTimes[type] < EVENT_THROTTLE_MS\n    ) {\n      return;\n    }\n\n    if (callback) {\n      callback(nativeEvent);\n      this.lastEventsTimes[type] = new Date();\n      this.lastEvents[type] = JSON.stringify(nativeEvent);\n    }\n  };\n\n  convertNativeProps(props: BarCodeScannerProps) {\n    const newProps = mapValues(props, this.convertProp);\n    return newProps;\n  }\n\n  convertProp(value: any, key: string): any {\n    if (typeof value === 'string' && BarCodeScanner.ConversionTables[key]) {\n      return BarCodeScanner.ConversionTables[key][value];\n    }\n    return value;\n  }\n}\n\nexport const { Constants, getPermissionsAsync, requestPermissionsAsync } = BarCodeScanner;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}