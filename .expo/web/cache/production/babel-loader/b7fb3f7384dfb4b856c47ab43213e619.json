{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import getChildRouter from\"./getChildRouter\";import getNavigationActionCreators from\"./routers/getNavigationActionCreators\";import getChildrenNavigationCache from\"./getChildrenNavigationCache\";import getEventManager from\"./getEventManager\";var createParamGetter=function createParamGetter(route){return function(paramName,defaultValue){var params=route.params;if(params&&paramName in params){return params[paramName];}return defaultValue;};};function _getChildNavigation(navigation,childKey,getCurrentParentNavigation){var children=getChildrenNavigationCache(navigation);var childRoute=navigation.state.routes.find(function(r){return r.key===childKey;});if(!childRoute){return null;}if(children[childKey]&&children[childKey].state===childRoute){return children[childKey];}var childRouter=getChildRouter(navigation.router,childRoute.routeName);var focusedGrandChildRoute=childRoute.routes&&typeof childRoute.index==='number'?childRoute.routes[childRoute.index]:null;var actionCreators=_objectSpread(_objectSpread(_objectSpread(_objectSpread({},navigation.actions),navigation.router.getActionCreators(childRoute,navigation.state.key)),childRouter?childRouter.getActionCreators(focusedGrandChildRoute,childRoute.key):{}),getNavigationActionCreators(childRoute));var actionHelpers={};Object.keys(actionCreators).forEach(function(actionName){actionHelpers[actionName]=function(){var actionCreator=actionCreators[actionName];var action=actionCreator.apply(void 0,arguments);return navigation.dispatch(action);};});var _isFirstRouteInParent=true;var parentNavigation=getCurrentParentNavigation();if(parentNavigation){_isFirstRouteInParent=parentNavigation.state.routes.indexOf(childRoute)===0;}if(children[childKey]&&children[childKey].isFirstRouteInParent()===_isFirstRouteInParent){children[childKey]=_objectSpread(_objectSpread(_objectSpread({},children[childKey]),actionHelpers),{},{state:childRoute,router:childRouter,actions:actionCreators,getParam:createParamGetter(childRoute)});return children[childKey];}else{var _getEventManager=getEventManager(childKey),addListener=_getEventManager.addListener,emit=_getEventManager.emit;children[childKey]=_objectSpread(_objectSpread({},actionHelpers),{},{state:childRoute,router:childRouter,actions:actionCreators,getParam:createParamGetter(childRoute),getChildNavigation:function getChildNavigation(grandChildKey){return _getChildNavigation(children[childKey],grandChildKey,function(){var nav=getCurrentParentNavigation();return nav&&nav.getChildNavigation(childKey);});},isFocused:function isFocused(){var currentNavigation=getCurrentParentNavigation();if(!currentNavigation){return false;}var _currentNavigation$st=currentNavigation.state,routes=_currentNavigation$st.routes,index=_currentNavigation$st.index;if(!currentNavigation.isFocused()){return false;}if(routes[index].key===childKey){return true;}return false;},isFirstRouteInParent:function isFirstRouteInParent(){return _isFirstRouteInParent;},dispatch:navigation.dispatch,getScreenProps:navigation.getScreenProps,dangerouslyGetParent:getCurrentParentNavigation,addListener:addListener,emit:emit});return children[childKey];}}export default _getChildNavigation;","map":{"version":3,"sources":["getChildNavigation.js"],"names":["createParamGetter","route","params","paramName","children","getChildrenNavigationCache","childRoute","navigation","r","childRouter","getChildRouter","focusedGrandChildRoute","actionCreators","getNavigationActionCreators","actionHelpers","Object","actionName","actionCreator","action","isFirstRouteInParent","parentNavigation","getCurrentParentNavigation","state","router","actions","getParam","emit","getEventManager","getChildNavigation","grandChildKey","nav","isFocused","currentNavigation","index","routes","dispatch","getScreenProps","dangerouslyGetParent","addListener"],"mappings":"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","sourcesContent":["import getChildRouter from './getChildRouter';\nimport getNavigationActionCreators from './routers/getNavigationActionCreators';\nimport getChildrenNavigationCache from './getChildrenNavigationCache';\nimport getEventManager from './getEventManager';\n\nconst createParamGetter = (route) => (paramName, defaultValue) => {\n  const params = route.params;\n\n  if (params && paramName in params) {\n    return params[paramName];\n  }\n\n  return defaultValue;\n};\n\nfunction getChildNavigation(navigation, childKey, getCurrentParentNavigation) {\n  const children = getChildrenNavigationCache(navigation);\n  const childRoute = navigation.state.routes.find((r) => r.key === childKey);\n\n  if (!childRoute) {\n    return null;\n  }\n\n  if (children[childKey] && children[childKey].state === childRoute) {\n    return children[childKey];\n  }\n\n  const childRouter = getChildRouter(navigation.router, childRoute.routeName);\n\n  // If the route has children, we'll use this to pass in to the action creators\n  // for the childRouter so that any action that depends on the active route will\n  // behave as expected. We don't explicitly require that routers implement routes\n  // and index properties, but if we did then we would put an invariant here to\n  // ensure that a focusedGrandChildRoute exists if childRouter is defined.\n  const focusedGrandChildRoute =\n    childRoute.routes && typeof childRoute.index === 'number'\n      ? childRoute.routes[childRoute.index]\n      : null;\n\n  const actionCreators = {\n    ...navigation.actions,\n    ...navigation.router.getActionCreators(childRoute, navigation.state.key),\n    ...(childRouter\n      ? childRouter.getActionCreators(focusedGrandChildRoute, childRoute.key)\n      : {}),\n    ...getNavigationActionCreators(childRoute),\n  };\n\n  const actionHelpers = {};\n  Object.keys(actionCreators).forEach((actionName) => {\n    actionHelpers[actionName] = (...args) => {\n      const actionCreator = actionCreators[actionName];\n      const action = actionCreator(...args);\n      return navigation.dispatch(action);\n    };\n  });\n\n  let isFirstRouteInParent = true;\n\n  const parentNavigation = getCurrentParentNavigation();\n\n  if (parentNavigation) {\n    isFirstRouteInParent =\n      parentNavigation.state.routes.indexOf(childRoute) === 0;\n  }\n\n  if (\n    children[childKey] &&\n    children[childKey].isFirstRouteInParent() === isFirstRouteInParent\n  ) {\n    children[childKey] = {\n      ...children[childKey],\n      ...actionHelpers,\n      state: childRoute,\n      router: childRouter,\n      actions: actionCreators,\n      getParam: createParamGetter(childRoute),\n    };\n    return children[childKey];\n  } else {\n    const { addListener, emit } = getEventManager(childKey);\n\n    children[childKey] = {\n      ...actionHelpers,\n\n      state: childRoute,\n      router: childRouter,\n      actions: actionCreators,\n      getParam: createParamGetter(childRoute),\n\n      getChildNavigation: (grandChildKey) =>\n        getChildNavigation(children[childKey], grandChildKey, () => {\n          const nav = getCurrentParentNavigation();\n          return nav && nav.getChildNavigation(childKey);\n        }),\n\n      isFocused: () => {\n        const currentNavigation = getCurrentParentNavigation();\n        if (!currentNavigation) {\n          return false;\n        }\n        const { routes, index } = currentNavigation.state;\n        if (!currentNavigation.isFocused()) {\n          return false;\n        }\n        if (routes[index].key === childKey) {\n          return true;\n        }\n        return false;\n      },\n      isFirstRouteInParent: () => isFirstRouteInParent,\n      dispatch: navigation.dispatch,\n      getScreenProps: navigation.getScreenProps,\n      dangerouslyGetParent: getCurrentParentNavigation,\n      addListener,\n      emit,\n    };\n\n    return children[childKey];\n  }\n}\n\nexport default getChildNavigation;\n"]},"metadata":{},"sourceType":"module"}