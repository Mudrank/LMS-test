{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _defineProperty2 from\"@babel/runtime/helpers/defineProperty\";var _stateToPropMappings;function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty2(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}var _UIManager$getViewMan,_UIManager$getViewMan2,_UIManager$getConstan;function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import findNodeHandleRN from\"react-native-web/dist/exports/findNodeHandle\";import NativeModules from\"react-native-web/dist/exports/NativeModules\";import Platform from\"react-native-web/dist/exports/Platform\";import Touchable from\"react-native-web/dist/exports/Touchable\";import deepEqual from'fbjs/lib/areEqual';import RNGestureHandlerModule from\"../RNGestureHandlerModule\";import{State}from\"../State\";function findNodeHandle(node){if(Platform.OS==='web')return node;return findNodeHandleRN(node);}var _NativeModules$UIMana=NativeModules.UIManager,UIManager=_NativeModules$UIMana===void 0?{}:_NativeModules$UIMana;var customGHEventsConfig={onGestureHandlerEvent:{registrationName:'onGestureHandlerEvent'},onGestureHandlerStateChange:{registrationName:'onGestureHandlerStateChange'}};UIManager.genericDirectEventTypes=_objectSpread(_objectSpread({},UIManager.genericDirectEventTypes),customGHEventsConfig);var UIManagerConstants=(_UIManager$getViewMan=(_UIManager$getViewMan2=UIManager.getViewManagerConfig)===null||_UIManager$getViewMan2===void 0?void 0:_UIManager$getViewMan2.call(UIManager,'getConstants'))!==null&&_UIManager$getViewMan!==void 0?_UIManager$getViewMan:(_UIManager$getConstan=UIManager.getConstants)===null||_UIManager$getConstan===void 0?void 0:_UIManager$getConstan.call(UIManager);if(UIManagerConstants){UIManagerConstants.genericDirectEventTypes=_objectSpread(_objectSpread({},UIManagerConstants.genericDirectEventTypes),customGHEventsConfig);}var _UIManager$setJSRespo=UIManager.setJSResponder,oldSetJSResponder=_UIManager$setJSRespo===void 0?function(){}:_UIManager$setJSRespo,_UIManager$clearJSRes=UIManager.clearJSResponder,oldClearJSResponder=_UIManager$clearJSRes===void 0?function(){}:_UIManager$clearJSRes;UIManager.setJSResponder=function(tag,blockNativeResponder){RNGestureHandlerModule.handleSetJSResponder(tag,blockNativeResponder);oldSetJSResponder(tag,blockNativeResponder);};UIManager.clearJSResponder=function(){RNGestureHandlerModule.handleClearJSResponder();oldClearJSResponder();};var handlerTag=1;var handlerIDToTag={};function isConfigParam(param,name){return param!==undefined&&(param!==Object(param)||!('__isNative'in param))&&name!=='onHandlerStateChange'&&name!=='onGestureEvent';}function filterConfig(props,validProps){var defaults=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};var res=_objectSpread({},defaults);validProps.forEach(function(key){var value=props[key];if(isConfigParam(value,key)){var _value=props[key];if(key==='simultaneousHandlers'||key==='waitFor'){_value=transformIntoHandlerTags(props[key]);}else if(key==='hitSlop'){if(typeof _value!=='object'){_value={top:_value,left:_value,bottom:_value,right:_value};}}res[key]=_value;}});return res;}function transformIntoHandlerTags(handlerIDs){if(!Array.isArray(handlerIDs)){handlerIDs=[handlerIDs];}if(Platform.OS==='web'){return handlerIDs.map(function(_ref){var current=_ref.current;return current;}).filter(function(handle){return handle;});}return handlerIDs.map(function(handlerID){var _handlerID$current;return handlerIDToTag[handlerID]||((_handlerID$current=handlerID.current)===null||_handlerID$current===void 0?void 0:_handlerID$current.handlerTag)||-1;}).filter(function(handlerTag){return handlerTag>0;});}function hasUnresolvedRefs(props){var extract=function extract(refs){if(!Array.isArray(refs)){return refs&&refs.current===null;}return refs.some(function(r){return r&&r.current===null;});};return extract(props['simultaneousHandlers'])||extract(props['waitFor']);}var stateToPropMappings=(_stateToPropMappings={},_defineProperty2(_stateToPropMappings,State.UNDETERMINED,undefined),_defineProperty2(_stateToPropMappings,State.BEGAN,'onBegan'),_defineProperty2(_stateToPropMappings,State.FAILED,'onFailed'),_defineProperty2(_stateToPropMappings,State.CANCELLED,'onCancelled'),_defineProperty2(_stateToPropMappings,State.ACTIVE,'onActivated'),_defineProperty2(_stateToPropMappings,State.END,'onEnded'),_stateToPropMappings);export default function createHandler(_ref2){var name=_ref2.name,_ref2$allowedProps=_ref2.allowedProps,allowedProps=_ref2$allowedProps===void 0?[]:_ref2$allowedProps,_ref2$config=_ref2.config,config=_ref2$config===void 0?{}:_ref2$config,transformProps=_ref2.transformProps,_ref2$customNativePro=_ref2.customNativeProps,customNativeProps=_ref2$customNativePro===void 0?[]:_ref2$customNativePro;var Handler=function(_React$Component){_inherits(Handler,_React$Component);var _super=_createSuper(Handler);function Handler(props){var _this;_classCallCheck(this,Handler);_this=_super.call(this,props);_defineProperty(_assertThisInitialized(_this),\"handlerTag\",void 0);_defineProperty(_assertThisInitialized(_this),\"config\",void 0);_defineProperty(_assertThisInitialized(_this),\"propsRef\",void 0);_defineProperty(_assertThisInitialized(_this),\"viewNode\",void 0);_defineProperty(_assertThisInitialized(_this),\"viewTag\",void 0);_defineProperty(_assertThisInitialized(_this),\"updateEnqueued\",null);_defineProperty(_assertThisInitialized(_this),\"onGestureHandlerEvent\",function(event){if(event.nativeEvent.handlerTag===_this.handlerTag){var _this$props$onGesture,_this$props;(_this$props$onGesture=(_this$props=_this.props).onGestureEvent)===null||_this$props$onGesture===void 0?void 0:_this$props$onGesture.call(_this$props,event);}else{var _this$props$onGesture2,_this$props2;(_this$props$onGesture2=(_this$props2=_this.props).onGestureHandlerEvent)===null||_this$props$onGesture2===void 0?void 0:_this$props$onGesture2.call(_this$props2,event);}});_defineProperty(_assertThisInitialized(_this),\"onGestureHandlerStateChange\",function(event){if(event.nativeEvent.handlerTag===_this.handlerTag){var _this$props$onHandler,_this$props3;(_this$props$onHandler=(_this$props3=_this.props).onHandlerStateChange)===null||_this$props$onHandler===void 0?void 0:_this$props$onHandler.call(_this$props3,event);var state=event.nativeEvent.state;var stateEventName=stateToPropMappings[state];var eventHandler=stateEventName&&_this.props[stateEventName];if(eventHandler&&typeof eventHandler==='function'){eventHandler(event);}}else{var _this$props$onGesture3,_this$props4;(_this$props$onGesture3=(_this$props4=_this.props).onGestureHandlerStateChange)===null||_this$props$onGesture3===void 0?void 0:_this$props$onGesture3.call(_this$props4,event);}});_defineProperty(_assertThisInitialized(_this),\"refHandler\",function(node){_this.viewNode=node;var child=React.Children.only(_this.props.children);var ref=child.ref;if(ref!==null){if(typeof ref==='function'){ref(node);}else{ref.current=node;}}});_defineProperty(_assertThisInitialized(_this),\"createGestureHandler\",function(newConfig){_this.config=newConfig;RNGestureHandlerModule.createGestureHandler(name,_this.handlerTag,newConfig);});_defineProperty(_assertThisInitialized(_this),\"attachGestureHandler\",function(newViewTag){_this.viewTag=newViewTag;if(Platform.OS==='web'){RNGestureHandlerModule.attachGestureHandler(_this.handlerTag,newViewTag,_this.propsRef);}else{RNGestureHandlerModule.attachGestureHandler(_this.handlerTag,newViewTag);}});_defineProperty(_assertThisInitialized(_this),\"updateGestureHandler\",function(newConfig){_this.config=newConfig;RNGestureHandlerModule.updateGestureHandler(_this.handlerTag,newConfig);});_this.handlerTag=handlerTag++;_this.config={};_this.propsRef=React.createRef();if(props.id){if(handlerIDToTag[props.id]!==undefined){throw new Error(\"Handler with ID \\\"\".concat(props.id,\"\\\" already registered\"));}handlerIDToTag[props.id]=_this.handlerTag;}return _this;}_createClass(Handler,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;var props=this.props;if(hasUnresolvedRefs(props)){this.updateEnqueued=setImmediate(function(){_this2.updateEnqueued=null;_this2.update();});}this.createGestureHandler(filterConfig(transformProps?transformProps(this.props):this.props,[].concat(_toConsumableArray(allowedProps),_toConsumableArray(customNativeProps)),config));this.attachGestureHandler(findNodeHandle(this.viewNode));}},{key:\"componentDidUpdate\",value:function componentDidUpdate(){var viewTag=findNodeHandle(this.viewNode);if(this.viewTag!==viewTag){this.attachGestureHandler(viewTag);}this.update();}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){RNGestureHandlerModule.dropGestureHandler(this.handlerTag);if(this.updateEnqueued){clearImmediate(this.updateEnqueued);}var handlerID=this.props.id;if(handlerID){delete handlerIDToTag[handlerID];}}},{key:\"update\",value:function update(){var newConfig=filterConfig(transformProps?transformProps(this.props):this.props,[].concat(_toConsumableArray(allowedProps),_toConsumableArray(customNativeProps)),config);if(!deepEqual(this.config,newConfig)){this.updateGestureHandler(newConfig);}}},{key:\"setNativeProps\",value:function setNativeProps(updates){var mergedProps=_objectSpread(_objectSpread({},this.props),updates);var newConfig=filterConfig(transformProps?transformProps(mergedProps):mergedProps,[].concat(_toConsumableArray(allowedProps),_toConsumableArray(customNativeProps)),config);this.updateGestureHandler(newConfig);}},{key:\"render\",value:function render(){var gestureEventHandler=this.onGestureHandlerEvent;var _this$props5=this.props,onGestureEvent=_this$props5.onGestureEvent,onGestureHandlerEvent=_this$props5.onGestureHandlerEvent;if(onGestureEvent&&typeof onGestureEvent!=='function'){if(onGestureHandlerEvent){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}gestureEventHandler=onGestureEvent;}else{if(onGestureHandlerEvent&&typeof onGestureHandlerEvent!=='function'){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}}var gestureStateEventHandler=this.onGestureHandlerStateChange;var _this$props6=this.props,onHandlerStateChange=_this$props6.onHandlerStateChange,onGestureHandlerStateChange=_this$props6.onGestureHandlerStateChange;if(onHandlerStateChange&&typeof onHandlerStateChange!=='function'){if(onGestureHandlerStateChange){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}gestureStateEventHandler=onHandlerStateChange;}else{if(onGestureHandlerStateChange&&typeof onGestureHandlerStateChange!=='function'){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}}var events={onGestureHandlerEvent:gestureEventHandler,onGestureHandlerStateChange:gestureStateEventHandler};this.propsRef.current=events;var child=React.Children.only(this.props.children);var grandChildren=child.props.children;if(Touchable.TOUCH_TARGET_DEBUG&&child.type&&(child.type==='RNGestureHandlerButton'||child.type.name==='View'||child.type.displayName==='View')){grandChildren=React.Children.toArray(grandChildren);grandChildren.push(Touchable.renderDebugView({color:'mediumspringgreen',hitSlop:child.props.hitSlop}));}return React.cloneElement(child,_objectSpread({ref:this.refHandler,collapsable:false},events),grandChildren);}}]);return Handler;}(React.Component);_defineProperty(Handler,\"displayName\",name);return Handler;}","map":{"version":3,"sources":["createHandler.ts"],"names":["Platform","findNodeHandleRN","UIManager","customGHEventsConfig","onGestureHandlerEvent","registrationName","onGestureHandlerStateChange","UIManagerConstants","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","RNGestureHandlerModule","handlerTag","handlerIDToTag","param","Object","name","defaults","res","validProps","key","value","props","isConfigParam","transformIntoHandlerTags","top","left","bottom","right","Array","handlerIDs","current","handle","handlerID","extract","refs","r","stateToPropMappings","State","allowedProps","config","customNativeProps","React","constructor","componentDidMount","hasUnresolvedRefs","setImmediate","filterConfig","transformProps","findNodeHandle","componentDidUpdate","viewTag","componentWillUnmount","clearImmediate","event","state","stateEventName","eventHandler","node","child","ref","newConfig","newViewTag","update","deepEqual","setNativeProps","mergedProps","updates","render","gestureEventHandler","onGestureEvent","gestureStateEventHandler","onHandlerStateChange","events","grandChildren","Touchable","color","hitSlop","collapsable"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  findNodeHandle as findNodeHandleRN,\n  NativeModules,\n  Platform,\n  Touchable,\n} from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'fbjs/lib/areEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\nimport { State } from '../State';\n\nimport {\n  BaseGestureHandlerProps,\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from './gestureHandlers';\nimport { ValueOf } from '../typeUtils';\n\nfunction findNodeHandle(\n  node: null | number | React.Component<any, any> | React.ComponentClass<any>\n): null | number | React.Component<any, any> | React.ComponentClass<any> {\n  if (Platform.OS === 'web') return node;\n  return findNodeHandleRN(node);\n}\n\nconst { UIManager = {} } = NativeModules;\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManager.genericDirectEventTypes = {\n  ...UIManager.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManager.getViewManagerConfig?.('getConstants') ??\n  UIManager.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManager;\nUIManager.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManager.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet handlerTag = 1;\nconst handlerIDToTag: Record<string, number> = {};\n\nfunction isConfigParam(param: unknown, name: string) {\n  // param !== Object(param) returns false if `param` is a function\n  // or an object and returns true if `param` is null\n  return (\n    param !== undefined &&\n    (param !== Object(param) ||\n      !('__isNative' in (param as Record<string, unknown>))) &&\n    name !== 'onHandlerStateChange' &&\n    name !== 'onGestureEvent'\n  );\n}\n\nfunction filterConfig(\n  props: Record<string, unknown>,\n  validProps: string[],\n  defaults: Record<string, unknown> = {}\n) {\n  const res = { ...defaults };\n  validProps.forEach((key) => {\n    const value = props[key];\n    if (isConfigParam(value, key)) {\n      let value = props[key];\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop') {\n        if (typeof value !== 'object') {\n          value = { top: value, left: value, bottom: value, right: value };\n        }\n      }\n      res[key] = value;\n    }\n  });\n  return res;\n}\n\nfunction transformIntoHandlerTags(handlerIDs: any) {\n  if (!Array.isArray(handlerIDs)) {\n    handlerIDs = [handlerIDs];\n  }\n\n  if (Platform.OS === 'web') {\n    return handlerIDs\n      .map(({ current }: { current: any }) => current)\n      .filter((handle: any) => handle);\n  }\n  // converts handler string IDs into their numeric tags\n  return handlerIDs\n    .map(\n      (handlerID: any) =>\n        handlerIDToTag[handlerID] || handlerID.current?.handlerTag || -1\n    )\n    .filter((handlerTag: number) => handlerTag > 0);\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<\n  HandlerPropsT extends Record<string, unknown>\n> = Readonly<{\n  name: string;\n  allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n  config: Readonly<Record<string, unknown>>;\n  transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n  customNativeProps?: Readonly<string[]>;\n}>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  class Handler extends React.Component<T & InternalEventHandlers> {\n    static displayName = name;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private viewNode: any;\n    private viewTag?: number;\n    private updateEnqueued: ReturnType<typeof setImmediate> | null = null;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = handlerTag++;\n      this.config = {};\n      this.propsRef = React.createRef();\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // setImmediate. This makes it so _update function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update();\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update();\n    }\n\n    componentWillUnmount() {\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      if (this.updateEnqueued) {\n        clearImmediate(this.updateEnqueued);\n      }\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onGestureEvent?.(event);\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onHandlerStateChange?.(event);\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler)(\n          this.handlerTag,\n          newViewTag,\n          this.propsRef\n        );\n      } else {\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag\n        );\n      }\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n    };\n\n    private update() {\n      const newConfig = filterConfig(\n        transformProps ? transformProps(this.props) : this.props,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      if (!deepEqual(this.config, newConfig)) {\n        this.updateGestureHandler(newConfig);\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const {\n        onGestureEvent,\n        onGestureHandlerEvent,\n      }: OnGestureEventHandlers = this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: gestureEventHandler,\n        onGestureHandlerStateChange: gestureStateEventHandler,\n      };\n\n      this.propsRef.current = events;\n\n      const child: any = React.Children.only(this.props.children);\n      let grandChildren = child.props.children;\n      if (\n        Touchable.TOUCH_TARGET_DEBUG &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop,\n          })\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"]},"metadata":{},"sourceType":"module"}