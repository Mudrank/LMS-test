{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import TextInput from\"react-native-web/dist/exports/TextInput\";import Keyboard from\"react-native-web/dist/exports/Keyboard\";import I18nManager from\"react-native-web/dist/exports/I18nManager\";import InteractionManager from\"react-native-web/dist/exports/InteractionManager\";import{PanGestureHandler,State}from'react-native-gesture-handler';import Animated,{Easing as OldEasing,EasingNode}from'react-native-reanimated';import memoize from\"./memoize\";var Easing=EasingNode||OldEasing;var Clock=Animated.Clock,Value=Animated.Value,onChange=Animated.onChange,and=Animated.and,or=Animated.or,abs=Animated.abs,add=Animated.add,block=Animated.block,call=Animated.call,ceil=Animated.ceil,clockRunning=Animated.clockRunning,cond=Animated.cond,divide=Animated.divide,eq=Animated.eq,event=Animated.event,floor=Animated.floor,greaterThan=Animated.greaterThan,lessThan=Animated.lessThan,max=Animated.max,min=Animated.min,multiply=Animated.multiply,neq=Animated.neq,not=Animated.not,round=Animated.round,set=Animated.set,spring=Animated.spring,startClock=Animated.startClock,stopClock=Animated.stopClock,sub=Animated.sub,timing=Animated.timing;var PagerContext=React.createContext({});var TRUE=1;var FALSE=0;var NOOP=0;var UNSET=-1;var DIRECTION_LEFT=1;var DIRECTION_RIGHT=-1;var SWIPE_DISTANCE_MINIMUM=20;var SWIPE_VELOCITY_IMPACT=0.2;var SPRING_CONFIG={stiffness:1000,damping:500,mass:3,overshootClamping:true,restDisplacementThreshold:0.01,restSpeedThreshold:0.01};var SPRING_VELOCITY_SCALE=1;var TIMING_CONFIG={duration:200,easing:Easing.out(Easing.cubic)};var Pager=function(_React$Component){_inherits(Pager,_React$Component);var _super=_createSuper(Pager);function Pager(){var _this;_classCallCheck(this,Pager);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty(_assertThisInitialized(_this),\"state\",{enabled:true,childPanGestureHandlerRefs:[]});_defineProperty(_assertThisInitialized(_this),\"mounted\",false);_defineProperty(_assertThisInitialized(_this),\"providerVal\",{addGestureHandlerRef:function addGestureHandlerRef(ref){if(!_this.state.childPanGestureHandlerRefs.includes(ref)&&_this.mounted){_this.setState(function(prevState){return{childPanGestureHandlerRefs:[].concat(_toConsumableArray(prevState.childPanGestureHandlerRefs),[ref])};});}}});_defineProperty(_assertThisInitialized(_this),\"gestureHandlerRef\",React.createRef());_defineProperty(_assertThisInitialized(_this),\"clock\",new Clock());_defineProperty(_assertThisInitialized(_this),\"velocityX\",new Value(0));_defineProperty(_assertThisInitialized(_this),\"gestureX\",new Value(0));_defineProperty(_assertThisInitialized(_this),\"gestureState\",new Value(State.UNDETERMINED));_defineProperty(_assertThisInitialized(_this),\"offsetX\",new Value(0));_defineProperty(_assertThisInitialized(_this),\"gesturesEnabled\",new Value(1));_defineProperty(_assertThisInitialized(_this),\"progress\",new Value(_this.props.navigationState.index*_this.props.layout.width*DIRECTION_RIGHT));_defineProperty(_assertThisInitialized(_this),\"index\",new Value(_this.props.navigationState.index));_defineProperty(_assertThisInitialized(_this),\"nextIndex\",new Value(UNSET));_defineProperty(_assertThisInitialized(_this),\"lastEnteredIndex\",new Value(_this.props.navigationState.index));_defineProperty(_assertThisInitialized(_this),\"isSwiping\",new Value(FALSE));_defineProperty(_assertThisInitialized(_this),\"isSwipeGesture\",new Value(FALSE));_defineProperty(_assertThisInitialized(_this),\"indexAtSwipeEnd\",new Value(_this.props.navigationState.index));_defineProperty(_assertThisInitialized(_this),\"routesLength\",new Value(_this.props.navigationState.routes.length));_defineProperty(_assertThisInitialized(_this),\"layoutWidth\",new Value(_this.props.layout.width));_defineProperty(_assertThisInitialized(_this),\"swipeVelocityImpact\",new Value(_this.props.swipeVelocityImpact!==undefined?_this.props.swipeVelocityImpact:SWIPE_VELOCITY_IMPACT));_defineProperty(_assertThisInitialized(_this),\"springVelocityScale\",new Value(_this.props.springVelocityScale!==undefined?_this.props.springVelocityScale:SPRING_VELOCITY_SCALE));_defineProperty(_assertThisInitialized(_this),\"position\",cond(_this.layoutWidth,divide(multiply(_this.progress,-1),_this.layoutWidth),_this.index));_defineProperty(_assertThisInitialized(_this),\"springConfig\",{damping:new Value(_this.props.springConfig.damping!==undefined?_this.props.springConfig.damping:SPRING_CONFIG.damping),mass:new Value(_this.props.springConfig.mass!==undefined?_this.props.springConfig.mass:SPRING_CONFIG.mass),stiffness:new Value(_this.props.springConfig.stiffness!==undefined?_this.props.springConfig.stiffness:SPRING_CONFIG.stiffness),restSpeedThreshold:new Value(_this.props.springConfig.restSpeedThreshold!==undefined?_this.props.springConfig.restSpeedThreshold:SPRING_CONFIG.restSpeedThreshold),restDisplacementThreshold:new Value(_this.props.springConfig.restDisplacementThreshold!==undefined?_this.props.springConfig.restDisplacementThreshold:SPRING_CONFIG.restDisplacementThreshold)});_defineProperty(_assertThisInitialized(_this),\"timingConfig\",{duration:new Value(_this.props.timingConfig.duration!==undefined?_this.props.timingConfig.duration:TIMING_CONFIG.duration)});_defineProperty(_assertThisInitialized(_this),\"initialVelocityForSpring\",new Value(0));_defineProperty(_assertThisInitialized(_this),\"currentIndexValue\",_this.props.navigationState.index);_defineProperty(_assertThisInitialized(_this),\"pendingIndexValue\",undefined);_defineProperty(_assertThisInitialized(_this),\"previouslyFocusedTextInput\",null);_defineProperty(_assertThisInitialized(_this),\"enterListeners\",[]);_defineProperty(_assertThisInitialized(_this),\"interactionHandle\",null);_defineProperty(_assertThisInitialized(_this),\"jumpToIndex\",function(index){_this.isSwipeGesture.setValue(FALSE);_this.nextIndex.setValue(index);});_defineProperty(_assertThisInitialized(_this),\"jumpTo\",function(key){var _this$props=_this.props,navigationState=_this$props.navigationState,keyboardDismissMode=_this$props.keyboardDismissMode,onIndexChange=_this$props.onIndexChange;var index=navigationState.routes.findIndex(function(route){return route.key===key;});if(navigationState.index===index){_this.jumpToIndex(index);}else{onIndexChange(index);if(keyboardDismissMode==='auto'){Keyboard.dismiss();}}});_defineProperty(_assertThisInitialized(_this),\"addListener\",function(type,listener){switch(type){case'enter':_this.enterListeners.push(listener);break;}});_defineProperty(_assertThisInitialized(_this),\"removeListener\",function(type,listener){switch(type){case'enter':{var index=_this.enterListeners.indexOf(listener);if(index>-1){_this.enterListeners.splice(index,1);}break;}}});_defineProperty(_assertThisInitialized(_this),\"handleEnteredIndexChange\",function(_ref){var _ref2=_slicedToArray(_ref,1),value=_ref2[0];var index=Math.max(0,Math.min(value,_this.props.navigationState.routes.length-1));_this.enterListeners.forEach(function(listener){return listener(index);});});_defineProperty(_assertThisInitialized(_this),\"transitionTo\",function(index){var toValue=new Value(0);var frameTime=new Value(0);var state={position:_this.progress,time:new Value(0),finished:new Value(FALSE)};return block([cond(clockRunning(_this.clock),NOOP,[set(toValue,multiply(index,_this.layoutWidth,DIRECTION_RIGHT)),set(frameTime,0),set(state.time,0),set(state.finished,FALSE),set(_this.index,index)]),cond(_this.isSwipeGesture,[cond(not(clockRunning(_this.clock)),I18nManager.isRTL?set(_this.initialVelocityForSpring,multiply(-1,_this.velocityX,_this.springVelocityScale)):set(_this.initialVelocityForSpring,multiply(_this.velocityX,_this.springVelocityScale))),spring(_this.clock,_objectSpread(_objectSpread({},state),{},{velocity:_this.initialVelocityForSpring}),_objectSpread(_objectSpread(_objectSpread({},SPRING_CONFIG),_this.springConfig),{},{toValue:toValue}))],timing(_this.clock,_objectSpread(_objectSpread({},state),{},{frameTime:frameTime}),_objectSpread(_objectSpread(_objectSpread({},TIMING_CONFIG),_this.timingConfig),{},{toValue:toValue}))),cond(not(clockRunning(_this.clock)),startClock(_this.clock)),cond(state.finished,[set(_this.isSwipeGesture,FALSE),set(_this.gestureX,0),set(_this.velocityX,0),stopClock(_this.clock)])]);});_defineProperty(_assertThisInitialized(_this),\"handleGestureEvent\",event([{nativeEvent:{translationX:_this.gestureX,velocityX:_this.velocityX,state:_this.gestureState}}]));_defineProperty(_assertThisInitialized(_this),\"extrapolatedPosition\",add(_this.gestureX,multiply(_this.velocityX,_this.swipeVelocityImpact)));_defineProperty(_assertThisInitialized(_this),\"toggleEnabled\",function(){if(_this.state.enabled&&_this.mounted)_this.setState({enabled:false},function(){_this.setState({enabled:true});});});_defineProperty(_assertThisInitialized(_this),\"maybeCancel\",block([cond(and(_this.gesturesEnabled,or(and(eq(_this.index,sub(_this.routesLength,1)),lessThan(_this.gestureX,0)),and(eq(_this.index,0),greaterThan(_this.gestureX,0)))),set(_this.gesturesEnabled,0))]));_defineProperty(_assertThisInitialized(_this),\"translateX\",block([onChange(_this.gesturesEnabled,cond(not(_this.gesturesEnabled),call([_this.gesturesEnabled],_this.toggleEnabled))),onChange(_this.index,call([_this.index],function(_ref3){var _ref4=_slicedToArray(_ref3,1),value=_ref4[0];_this.currentIndexValue=value;if(value!==_this.props.navigationState.index){_this.props.onIndexChange(value);_this.pendingIndexValue=value;if(_this.mounted){_this.forceUpdate();}}})),onChange(_this.position,cond(I18nManager.isRTL?lessThan(_this.gestureX,0):greaterThan(_this.gestureX,0),cond(neq(floor(_this.position),_this.lastEnteredIndex),[set(_this.lastEnteredIndex,floor(_this.position)),call([floor(_this.position)],_this.handleEnteredIndexChange)]),cond(neq(ceil(_this.position),_this.lastEnteredIndex),[set(_this.lastEnteredIndex,ceil(_this.position)),call([ceil(_this.position)],_this.handleEnteredIndexChange)]))),onChange(_this.isSwiping,[cond(not(_this.isSwiping),set(_this.gesturesEnabled,1)),call([_this.isSwiping,_this.indexAtSwipeEnd,_this.index],function(_ref5){var _ref6=_slicedToArray(_ref5,3),isSwiping=_ref6[0],indexAtSwipeEnd=_ref6[1],currentIndex=_ref6[2];var _this$props2=_this.props,keyboardDismissMode=_this$props2.keyboardDismissMode,onSwipeStart=_this$props2.onSwipeStart,onSwipeEnd=_this$props2.onSwipeEnd;if(isSwiping===TRUE){onSwipeStart===null||onSwipeStart===void 0?void 0:onSwipeStart();_this.interactionHandle=InteractionManager.createInteractionHandle();if(keyboardDismissMode==='auto'){var input=TextInput.State.currentlyFocusedInput?TextInput.State.currentlyFocusedInput():TextInput.State.currentlyFocusedField();TextInput.State.blurTextInput(input);_this.previouslyFocusedTextInput=input;}else if(keyboardDismissMode==='on-drag'){Keyboard.dismiss();}}else{onSwipeEnd===null||onSwipeEnd===void 0?void 0:onSwipeEnd();if(_this.interactionHandle!==null){InteractionManager.clearInteractionHandle(_this.interactionHandle);}if(keyboardDismissMode==='auto'){if(indexAtSwipeEnd===currentIndex){var _input=_this.previouslyFocusedTextInput;if(_input){TextInput.State.focusTextInput(_input);}}_this.previouslyFocusedTextInput=null;}}})]),onChange(_this.nextIndex,cond(neq(_this.nextIndex,UNSET),[cond(clockRunning(_this.clock),stopClock(_this.clock)),set(_this.gestureX,0),set(_this.index,_this.nextIndex),set(_this.nextIndex,UNSET)])),cond(eq(_this.gestureState,State.ACTIVE),[_this.maybeCancel,cond(_this.isSwiping,NOOP,[set(_this.isSwiping,TRUE),set(_this.isSwipeGesture,TRUE),set(_this.offsetX,_this.progress)]),set(_this.progress,I18nManager.isRTL?sub(_this.offsetX,_this.gestureX):add(_this.offsetX,_this.gestureX)),stopClock(_this.clock)],[set(_this.isSwiping,FALSE),set(_this.indexAtSwipeEnd,_this.index),_this.transitionTo(cond(and(greaterThan(abs(_this.gestureX),SWIPE_DISTANCE_MINIMUM),greaterThan(abs(_this.extrapolatedPosition),divide(_this.layoutWidth,2))),round(min(max(0,sub(_this.index,cond(greaterThan(_this.extrapolatedPosition,0),I18nManager.isRTL?DIRECTION_RIGHT:DIRECTION_LEFT,I18nManager.isRTL?DIRECTION_LEFT:DIRECTION_RIGHT))),sub(_this.routesLength,1))),_this.index))]),_this.progress]));_defineProperty(_assertThisInitialized(_this),\"getTranslateX\",memoize(function(layoutWidth,routesLength,translateX){return multiply(min(max(multiply(layoutWidth,sub(routesLength,1),DIRECTION_RIGHT),translateX),0),I18nManager.isRTL?-1:1);}));return _this;}_createClass(Pager,[{key:\"componentDidMount\",value:function componentDidMount(){this.mounted=true;if(this.context&&this.context.addGestureHandlerRef){this.context.addGestureHandlerRef(this.gestureHandlerRef);}}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){var _this$props3=this.props,navigationState=_this$props3.navigationState,layout=_this$props3.layout,swipeVelocityImpact=_this$props3.swipeVelocityImpact,springVelocityScale=_this$props3.springVelocityScale,springConfig=_this$props3.springConfig,timingConfig=_this$props3.timingConfig;var index=navigationState.index,routes=navigationState.routes;if(index!==prevProps.navigationState.index&&index!==this.currentIndexValue||typeof this.pendingIndexValue==='number'&&index!==this.pendingIndexValue){this.jumpToIndex(index);}this.pendingIndexValue=undefined;if(prevProps.navigationState.routes.length!==routes.length){this.routesLength.setValue(routes.length);}if(prevProps.layout.width!==layout.width){this.progress.setValue(-index*layout.width);this.layoutWidth.setValue(layout.width);}if(prevProps.swipeVelocityImpact!==swipeVelocityImpact){this.swipeVelocityImpact.setValue(swipeVelocityImpact!==undefined?swipeVelocityImpact:SWIPE_VELOCITY_IMPACT);}if(prevProps.springVelocityScale!==springVelocityScale){this.springVelocityScale.setValue(springVelocityScale!==undefined?springVelocityScale:SPRING_VELOCITY_SCALE);}if(prevProps.springConfig!==springConfig){this.springConfig.damping.setValue(springConfig.damping!==undefined?springConfig.damping:SPRING_CONFIG.damping);this.springConfig.mass.setValue(springConfig.mass!==undefined?springConfig.mass:SPRING_CONFIG.mass);this.springConfig.stiffness.setValue(springConfig.stiffness!==undefined?springConfig.stiffness:SPRING_CONFIG.stiffness);this.springConfig.restSpeedThreshold.setValue(springConfig.restSpeedThreshold!==undefined?springConfig.restSpeedThreshold:SPRING_CONFIG.restSpeedThreshold);this.springConfig.restDisplacementThreshold.setValue(springConfig.restDisplacementThreshold!==undefined?springConfig.restDisplacementThreshold:SPRING_CONFIG.restDisplacementThreshold);}if(prevProps.timingConfig!==timingConfig){this.timingConfig.duration.setValue(timingConfig.duration!==undefined?timingConfig.duration:TIMING_CONFIG.duration);}}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this.mounted=false;if(this.interactionHandle!==null){InteractionManager.clearInteractionHandle(this.interactionHandle);}}},{key:\"render\",value:function render(){var _this2=this;var _this$props4=this.props,layout=_this$props4.layout,navigationState=_this$props4.navigationState,swipeEnabled=_this$props4.swipeEnabled,children=_this$props4.children,removeClippedSubviews=_this$props4.removeClippedSubviews,gestureHandlerProps=_this$props4.gestureHandlerProps;var translateX=this.getTranslateX(this.layoutWidth,this.routesLength,this.translateX);return children({position:this.position,addListener:this.addListener,removeListener:this.removeListener,jumpTo:this.jumpTo,render:function render(children){return React.createElement(PanGestureHandler,_extends({ref:_this2.gestureHandlerRef,simultaneousHandlers:_this2.state.childPanGestureHandlerRefs,waitFor:_this2.state.childPanGestureHandlerRefs,enabled:layout.width!==0&&swipeEnabled&&_this2.state.enabled,onGestureEvent:_this2.handleGestureEvent,onHandlerStateChange:_this2.handleGestureEvent,activeOffsetX:[-SWIPE_DISTANCE_MINIMUM,SWIPE_DISTANCE_MINIMUM],failOffsetY:[-SWIPE_DISTANCE_MINIMUM,SWIPE_DISTANCE_MINIMUM]},gestureHandlerProps),React.createElement(Animated.View,{removeClippedSubviews:removeClippedSubviews,style:[styles.container,layout.width?{width:layout.width*navigationState.routes.length,transform:[{translateX:translateX}]}:null]},React.createElement(PagerContext.Provider,{value:_this2.providerVal},children)));}});}}]);return Pager;}(React.Component);export{Pager as default};_defineProperty(Pager,\"defaultProps\",{swipeVelocityImpact:SWIPE_VELOCITY_IMPACT,springVelocityScale:SPRING_VELOCITY_SCALE});_defineProperty(Pager,\"contextType\",PagerContext);var styles=StyleSheet.create({container:{flex:1,flexDirection:'row'}});","map":{"version":3,"sources":["Pager.tsx"],"names":["Easing","EasingNode","timing","PagerContext","React","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_MINIMUM","SWIPE_VELOCITY_IMPACT","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","SPRING_VELOCITY_SCALE","TIMING_CONFIG","duration","easing","Pager","swipeVelocityImpact","springVelocityScale","enabled","childPanGestureHandlerRefs","componentDidMount","componentDidUpdate","timingConfig","routes","index","prevProps","layout","springConfig","componentWillUnmount","InteractionManager","addGestureHandlerRef","ref","prevState","State","cond","divide","multiply","key","onIndexChange","navigationState","route","keyboardDismissMode","Keyboard","Math","listener","toValue","frameTime","state","position","time","finished","block","clockRunning","set","not","I18nManager","spring","velocity","initialVelocityForSpring","startClock","stopClock","event","nativeEvent","translationX","velocityX","gestureState","add","and","or","eq","sub","lessThan","greaterThan","onChange","call","value","neq","floor","ceil","onSwipeEnd","isSwiping","onSwipeStart","input","TextInput","indexAtSwipeEnd","abs","round","min","max","memoize","render","gestureHandlerProps","translateX","children","addListener","removeListener","jumpTo","styles","width","transform","providerVal","container","flex","flexDirection"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  TextInput,\n  Keyboard,\n  I18nManager,\n  InteractionManager,\n} from 'react-native';\nimport { PanGestureHandler, State } from 'react-native-gesture-handler';\nimport Animated, {\n  Easing as OldEasing,\n  // @ts-ignore\n  EasingNode,\n} from 'react-native-reanimated';\nimport memoize from './memoize';\n\nimport {\n  Layout,\n  NavigationState,\n  Route,\n  Listener,\n  PagerCommonProps,\n  EventEmitterProps,\n} from './types';\n\ntype Binary = 0 | 1;\n\nconst Easing = EasingNode || OldEasing;\n\nexport type Props<T extends Route> = PagerCommonProps & {\n  onIndexChange: (index: number) => void;\n  navigationState: NavigationState<T>;\n  layout: Layout;\n  // Clip unfocused views to improve memory usage\n  // Don't enable this on iOS where this is buggy and views don't re-appear\n  removeClippedSubviews?: boolean;\n  children: (\n    props: EventEmitterProps & {\n      // Animated value which represents the state of current index\n      // It can include fractional digits as it represents the intermediate value\n      position: Animated.Node<number>;\n      // Function to actually render the content of the pager\n      // The parent component takes care of rendering\n      render: (children: React.ReactNode) => React.ReactNode;\n      // Callback to call when switching the tab\n      // The tab switch animation is performed even if the index in state is unchanged\n      jumpTo: (key: string) => void;\n    }\n  ) => React.ReactNode;\n  gestureHandlerProps: React.ComponentProps<typeof PanGestureHandler>;\n};\n\ntype ComponentState = {\n  enabled: boolean;\n  childPanGestureHandlerRefs: React.RefObject<PanGestureHandler>[];\n};\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  and,\n  or,\n  abs,\n  add,\n  block,\n  call,\n  ceil,\n  clockRunning,\n  cond,\n  divide,\n  eq,\n  event,\n  floor,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  not,\n  round,\n  set,\n  spring,\n  startClock,\n  stopClock,\n  sub,\n  timing,\n} = Animated;\n\nconst PagerContext = React.createContext({});\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_MINIMUM = 20;\n\nconst SWIPE_VELOCITY_IMPACT = 0.2;\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst SPRING_VELOCITY_SCALE = 1;\n\nconst TIMING_CONFIG = {\n  duration: 200,\n  easing: Easing.out(Easing.cubic),\n};\n\nexport default class Pager<T extends Route> extends React.Component<\n  Props<T>,\n  ComponentState\n> {\n  static defaultProps = {\n    swipeVelocityImpact: SWIPE_VELOCITY_IMPACT,\n    springVelocityScale: SPRING_VELOCITY_SCALE,\n  };\n\n  state = {\n    enabled: true,\n    childPanGestureHandlerRefs: [] as React.RefObject<PanGestureHandler>[],\n  };\n\n  componentDidMount() {\n    this.mounted = true;\n\n    // Register this PanGestureHandler with the parent (if parent exists)\n    // in order to coordinate gestures between handlers.\n    if (this.context && this.context.addGestureHandlerRef) {\n      this.context.addGestureHandlerRef(this.gestureHandlerRef);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props<T>) {\n    const {\n      navigationState,\n      layout,\n      swipeVelocityImpact,\n      springVelocityScale,\n      springConfig,\n      timingConfig,\n    } = this.props;\n    const { index, routes } = navigationState;\n\n    if (\n      // Check for index in state to avoid unintended transition if component updates during swipe\n      (index !== prevProps.navigationState.index &&\n        index !== this.currentIndexValue) ||\n      // Check if the user updated the index correctly after an update\n      (typeof this.pendingIndexValue === 'number' &&\n        index !== this.pendingIndexValue)\n    ) {\n      // Index in user's state is different from the index being tracked\n      this.jumpToIndex(index);\n    }\n\n    // Reset the pending index\n    this.pendingIndexValue = undefined;\n\n    // Update our mappings of animated nodes when props change\n    if (prevProps.navigationState.routes.length !== routes.length) {\n      this.routesLength.setValue(routes.length);\n    }\n\n    if (prevProps.layout.width !== layout.width) {\n      this.progress.setValue(-index * layout.width);\n      this.layoutWidth.setValue(layout.width);\n    }\n\n    if (prevProps.swipeVelocityImpact !== swipeVelocityImpact) {\n      this.swipeVelocityImpact.setValue(\n        swipeVelocityImpact !== undefined\n          ? swipeVelocityImpact\n          : SWIPE_VELOCITY_IMPACT\n      );\n    }\n\n    if (prevProps.springVelocityScale !== springVelocityScale) {\n      this.springVelocityScale.setValue(\n        springVelocityScale !== undefined\n          ? springVelocityScale\n          : SPRING_VELOCITY_SCALE\n      );\n    }\n\n    if (prevProps.springConfig !== springConfig) {\n      this.springConfig.damping.setValue(\n        springConfig.damping !== undefined\n          ? springConfig.damping\n          : SPRING_CONFIG.damping\n      );\n\n      this.springConfig.mass.setValue(\n        springConfig.mass !== undefined ? springConfig.mass : SPRING_CONFIG.mass\n      );\n\n      this.springConfig.stiffness.setValue(\n        springConfig.stiffness !== undefined\n          ? springConfig.stiffness\n          : SPRING_CONFIG.stiffness\n      );\n\n      this.springConfig.restSpeedThreshold.setValue(\n        springConfig.restSpeedThreshold !== undefined\n          ? springConfig.restSpeedThreshold\n          : SPRING_CONFIG.restSpeedThreshold\n      );\n\n      this.springConfig.restDisplacementThreshold.setValue(\n        springConfig.restDisplacementThreshold !== undefined\n          ? springConfig.restDisplacementThreshold\n          : SPRING_CONFIG.restDisplacementThreshold\n      );\n    }\n\n    if (prevProps.timingConfig !== timingConfig) {\n      this.timingConfig.duration.setValue(\n        timingConfig.duration !== undefined\n          ? timingConfig.duration\n          : TIMING_CONFIG.duration\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n\n    if (this.interactionHandle !== null) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n    }\n  }\n\n  mounted = false;\n\n  static contextType = PagerContext;\n\n  // Mechanism to add child PanGestureHandler refs in the case that this\n  // Pager is a parent to child Pagers. Allows for coordination between handlers\n  private providerVal = {\n    addGestureHandlerRef: (ref: React.RefObject<PanGestureHandler>) => {\n      if (\n        !this.state.childPanGestureHandlerRefs.includes(ref) &&\n        this.mounted\n      ) {\n        this.setState((prevState: ComponentState) => ({\n          childPanGestureHandlerRefs: [\n            ...prevState.childPanGestureHandlerRefs,\n            ref,\n          ],\n        }));\n      }\n    },\n  };\n\n  // PanGestureHandler ref used for coordination with parent handlers\n  private gestureHandlerRef: React.RefObject<\n    PanGestureHandler\n  > = React.createRef();\n\n  // Clock used for tab transition animations\n  private clock = new Clock();\n\n  // Current state of the gesture\n  private velocityX = new Value(0);\n  private gestureX = new Value(0);\n  private gestureState = new Value(State.UNDETERMINED);\n  private offsetX = new Value(0);\n\n  // Tracks current state of gesture handler enabled\n  private gesturesEnabled = new Value(1);\n\n  // Current progress of the page (translateX value)\n  private progress = new Value(\n    // Initial value is based on the index and page width\n    this.props.navigationState.index * this.props.layout.width * DIRECTION_RIGHT\n  );\n\n  // Initial index of the tabs\n  private index = new Value(this.props.navigationState.index);\n\n  // Next index of the tabs, updated for navigation from outside (tab press, state update)\n  private nextIndex: Animated.Value<number> = new Value(UNSET);\n\n  // Scene that was last entered\n  private lastEnteredIndex = new Value(this.props.navigationState.index);\n\n  // Whether the user is currently dragging the screen\n  private isSwiping: Animated.Value<Binary> = new Value(FALSE);\n\n  // Whether the update was due to swipe gesture\n  // This controls whether the transition will use a spring or timing animation\n  // Remember to set it before transition needs to occur\n  private isSwipeGesture: Animated.Value<Binary> = new Value(FALSE);\n\n  // Track the index value when a swipe gesture has ended\n  // This lets us know if a gesture end triggered a tab switch or not\n  private indexAtSwipeEnd: Animated.Value<number> = new Value(\n    this.props.navigationState.index\n  );\n\n  // Mappings to some prop values\n  // We use them in animation calculations, so we need live animated nodes\n  private routesLength = new Value(this.props.navigationState.routes.length);\n  private layoutWidth = new Value(this.props.layout.width);\n\n  // Determines how relevant is a velocity while calculating next position while swiping\n  private swipeVelocityImpact = new Value(\n    this.props.swipeVelocityImpact !== undefined\n      ? this.props.swipeVelocityImpact\n      : SWIPE_VELOCITY_IMPACT\n  );\n\n  private springVelocityScale = new Value(\n    this.props.springVelocityScale !== undefined\n      ? this.props.springVelocityScale\n      : SPRING_VELOCITY_SCALE\n  );\n\n  // The position value represent the position of the pager on a scale of 0 - routes.length-1\n  // It is calculated based on the translate value and layout width\n  // If we don't have the layout yet, we should return the current index\n  private position = cond(\n    this.layoutWidth,\n    divide(multiply(this.progress, -1), this.layoutWidth),\n    this.index\n  );\n\n  // Animation configuration\n  private springConfig = {\n    damping: new Value(\n      this.props.springConfig.damping !== undefined\n        ? this.props.springConfig.damping\n        : SPRING_CONFIG.damping\n    ),\n    mass: new Value(\n      this.props.springConfig.mass !== undefined\n        ? this.props.springConfig.mass\n        : SPRING_CONFIG.mass\n    ),\n    stiffness: new Value(\n      this.props.springConfig.stiffness !== undefined\n        ? this.props.springConfig.stiffness\n        : SPRING_CONFIG.stiffness\n    ),\n    restSpeedThreshold: new Value(\n      this.props.springConfig.restSpeedThreshold !== undefined\n        ? this.props.springConfig.restSpeedThreshold\n        : SPRING_CONFIG.restSpeedThreshold\n    ),\n    restDisplacementThreshold: new Value(\n      this.props.springConfig.restDisplacementThreshold !== undefined\n        ? this.props.springConfig.restDisplacementThreshold\n        : SPRING_CONFIG.restDisplacementThreshold\n    ),\n  };\n\n  private timingConfig = {\n    duration: new Value(\n      this.props.timingConfig.duration !== undefined\n        ? this.props.timingConfig.duration\n        : TIMING_CONFIG.duration\n    ),\n  };\n\n  // The reason for using this value instead of simply passing `this._velocity`\n  // into a spring animation is that we need to reverse it if we're using RTL mode.\n  // Also, it's not possible to pass multiplied value there, because\n  // value passed to STATE of spring (the first argument) has to be Animated.Value\n  // and it's not allowed to pass other nodes there. The result of multiplying is not an\n  // Animated.Value. So this value is being updated on each start of spring animation.\n  private initialVelocityForSpring = new Value(0);\n\n  // The current index change caused by the pager's animation\n  // The pager is used as a controlled component\n  // We need to keep track of the index to determine when to trigger animation\n  // The state will change at various points, we should only respond when we are out of sync\n  // This will ensure smoother animation and avoid weird glitches\n  private currentIndexValue = this.props.navigationState.index;\n\n  // The pending index value as result of state update caused by swipe gesture\n  // We need to set it when state changes from inside this component\n  // It also needs to be reset right after componentDidUpdate fires\n  private pendingIndexValue: number | undefined = undefined;\n\n  // Numeric id of the previously focused text input\n  // When a gesture didn't change the tab, we can restore the focused input with this\n  private previouslyFocusedTextInput: number | null = null;\n\n  // Listeners for the entered screen\n  private enterListeners: Listener[] = [];\n\n  // InteractionHandle to handle tasks around animations\n  private interactionHandle: number | null = null;\n\n  private jumpToIndex = (index: number) => {\n    // If the index changed, we need to trigger a tab switch\n    this.isSwipeGesture.setValue(FALSE);\n    this.nextIndex.setValue(index);\n  };\n\n  private jumpTo = (key: string) => {\n    const { navigationState, keyboardDismissMode, onIndexChange } = this.props;\n\n    const index = navigationState.routes.findIndex(\n      (route) => route.key === key\n    );\n\n    // A tab switch might occur when we're in the middle of a transition\n    // In that case, the index might be same as before\n    // So we conditionally make the pager to update the position\n    if (navigationState.index === index) {\n      this.jumpToIndex(index);\n    } else {\n      onIndexChange(index);\n\n      // When the index changes, the focused input will no longer be in current tab\n      // So we should dismiss the keyboard\n      if (keyboardDismissMode === 'auto') {\n        Keyboard.dismiss();\n      }\n    }\n  };\n\n  private addListener = (type: 'enter', listener: Listener) => {\n    switch (type) {\n      case 'enter':\n        this.enterListeners.push(listener);\n        break;\n    }\n  };\n\n  private removeListener = (type: 'enter', listener: Listener) => {\n    switch (type) {\n      case 'enter': {\n        const index = this.enterListeners.indexOf(listener);\n\n        if (index > -1) {\n          this.enterListeners.splice(index, 1);\n        }\n\n        break;\n      }\n    }\n  };\n\n  private handleEnteredIndexChange = ([value]: readonly number[]) => {\n    const index = Math.max(\n      0,\n      Math.min(value, this.props.navigationState.routes.length - 1)\n    );\n\n    this.enterListeners.forEach((listener) => listener(index));\n  };\n\n  private transitionTo = (index: Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.progress,\n      time: new Value(0),\n      finished: new Value(FALSE),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(index, this.layoutWidth, DIRECTION_RIGHT)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(this.index, index),\n      ]),\n      cond(\n        this.isSwipeGesture,\n        // Animate the values with a spring for swipe\n        [\n          cond(\n            not(clockRunning(this.clock)),\n            I18nManager.isRTL\n              ? set(\n                  this.initialVelocityForSpring,\n                  multiply(-1, this.velocityX, this.springVelocityScale)\n                )\n              : set(\n                  this.initialVelocityForSpring,\n                  multiply(this.velocityX, this.springVelocityScale)\n                )\n          ),\n          spring(\n            this.clock,\n            { ...state, velocity: this.initialVelocityForSpring },\n            { ...SPRING_CONFIG, ...this.springConfig, toValue }\n          ),\n        ],\n        // Otherwise use a timing animation for faster switching\n        timing(\n          this.clock,\n          { ...state, frameTime },\n          { ...TIMING_CONFIG, ...this.timingConfig, toValue }\n        )\n      ),\n      cond(not(clockRunning(this.clock)), startClock(this.clock)),\n      cond(state.finished, [\n        // Reset values\n        set(this.isSwipeGesture, FALSE),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n      ]),\n    ]);\n  };\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n        state: this.gestureState,\n      },\n    },\n  ]);\n\n  private extrapolatedPosition = add(\n    this.gestureX,\n    multiply(this.velocityX, this.swipeVelocityImpact)\n  );\n\n  private toggleEnabled = () => {\n    if (this.state.enabled && this.mounted)\n      this.setState({ enabled: false }, () => {\n        this.setState({ enabled: true });\n      });\n  };\n\n  // Cancel gesture if swiping back from the initial tab or forward from the last tab.\n  // Enables parent Pager to pick up the gesture if one exists.\n  private maybeCancel = block([\n    cond(\n      and(\n        this.gesturesEnabled,\n        or(\n          and(\n            eq(this.index, sub(this.routesLength, 1)),\n            lessThan(this.gestureX, 0)\n          ),\n          and(eq(this.index, 0), greaterThan(this.gestureX, 0))\n        )\n      ),\n      set(this.gesturesEnabled, 0)\n    ),\n  ]);\n\n  private translateX = block([\n    onChange(\n      this.gesturesEnabled,\n      cond(\n        not(this.gesturesEnabled),\n        call([this.gesturesEnabled], this.toggleEnabled)\n      )\n    ),\n    onChange(\n      this.index,\n      call([this.index], ([value]) => {\n        this.currentIndexValue = value;\n        // Without this check, the pager can go to an infinite update <-> animate loop for sync updates\n        if (value !== this.props.navigationState.index) {\n          // If the index changed, and previous animation has finished, update state\n          this.props.onIndexChange(value);\n\n          this.pendingIndexValue = value;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          if (this.mounted) {\n            this.forceUpdate();\n          }\n        }\n      })\n    ),\n    onChange(\n      this.position,\n      // Listen to updates in the position to detect when we enter a screen\n      // This is useful for things such as lazy loading when index change will fire too late\n      cond(\n        I18nManager.isRTL\n          ? lessThan(this.gestureX, 0)\n          : greaterThan(this.gestureX, 0),\n        // Based on the direction of the gesture, determine if we're entering the previous or next screen\n        cond(neq(floor(this.position), this.lastEnteredIndex), [\n          set(this.lastEnteredIndex, floor(this.position)),\n          call([floor(this.position)], this.handleEnteredIndexChange),\n        ]),\n        cond(neq(ceil(this.position), this.lastEnteredIndex), [\n          set(this.lastEnteredIndex, ceil(this.position)),\n          call([ceil(this.position)], this.handleEnteredIndexChange),\n        ])\n      )\n    ),\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      [\n        cond(not(this.isSwiping), set(this.gesturesEnabled, 1)),\n        call(\n          [this.isSwiping, this.indexAtSwipeEnd, this.index],\n          ([isSwiping, indexAtSwipeEnd, currentIndex]: readonly number[]) => {\n            const {\n              keyboardDismissMode,\n              onSwipeStart,\n              onSwipeEnd,\n            } = this.props;\n\n            if (isSwiping === TRUE) {\n              onSwipeStart?.();\n              this.interactionHandle = InteractionManager.createInteractionHandle();\n\n              if (keyboardDismissMode === 'auto') {\n                // @ts-ignore: the method is only available in newer React Native, but types aren't up-to-date\n                const input = TextInput.State.currentlyFocusedInput\n                  ? // @ts-ignore\n                    TextInput.State.currentlyFocusedInput()\n                  : TextInput.State.currentlyFocusedField();\n\n                // When a gesture begins, blur the currently focused input\n                TextInput.State.blurTextInput(input);\n\n                // Store the id of this input so we can refocus it if gesture was cancelled\n                this.previouslyFocusedTextInput = input;\n              } else if (keyboardDismissMode === 'on-drag') {\n                Keyboard.dismiss();\n              }\n            } else {\n              onSwipeEnd?.();\n\n              if (this.interactionHandle !== null) {\n                InteractionManager.clearInteractionHandle(\n                  this.interactionHandle\n                );\n              }\n\n              if (keyboardDismissMode === 'auto') {\n                if (indexAtSwipeEnd === currentIndex) {\n                  // The index didn't change, we should restore the focus of text input\n                  const input = this.previouslyFocusedTextInput;\n\n                  if (input) {\n                    TextInput.State.focusTextInput(input);\n                  }\n                }\n\n                this.previouslyFocusedTextInput = null;\n              }\n            }\n          }\n        ),\n      ]\n    ),\n    onChange(\n      this.nextIndex,\n      cond(neq(this.nextIndex, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        set(this.gestureX, 0),\n        // Update the index to trigger the transition\n        set(this.index, this.nextIndex),\n        set(this.nextIndex, UNSET),\n      ])\n    ),\n    cond(\n      eq(this.gestureState, State.ACTIVE),\n      [\n        this.maybeCancel,\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          set(this.isSwipeGesture, TRUE),\n          // Also update the drag offset to the last progress\n          set(this.offsetX, this.progress),\n        ]),\n        // Update progress with previous offset + gesture distance\n        set(\n          this.progress,\n          I18nManager.isRTL\n            ? sub(this.offsetX, this.gestureX)\n            : add(this.offsetX, this.gestureX)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.indexAtSwipeEnd, this.index),\n        this.transitionTo(\n          cond(\n            and(\n              // We should consider velocity and gesture distance only when a swipe ends\n              // The gestureX value will be non-zero when swipe has happened\n              // We check against a minimum distance instead of 0 because `activeOffsetX` doesn't seem to be respected on Android\n              // For other factors such as state update, the velocity and gesture distance don't matter\n              greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n              greaterThan(\n                abs(this.extrapolatedPosition),\n                divide(this.layoutWidth, 2)\n              )\n            ),\n            // For swipe gesture, to calculate the index, determine direction and add to index\n            // When the user swipes towards the left, we transition to the next tab\n            // When the user swipes towards the right, we transition to the previous tab\n            round(\n              min(\n                max(\n                  0,\n                  sub(\n                    this.index,\n                    cond(\n                      greaterThan(this.extrapolatedPosition, 0),\n                      I18nManager.isRTL ? DIRECTION_RIGHT : DIRECTION_LEFT,\n                      I18nManager.isRTL ? DIRECTION_LEFT : DIRECTION_RIGHT\n                    )\n                  )\n                ),\n                sub(this.routesLength, 1)\n              )\n            ),\n            // Index didn't change/changed due to state update\n            this.index\n          )\n        ),\n      ]\n    ),\n    this.progress,\n  ]);\n\n  private getTranslateX = memoize(\n    (\n      layoutWidth: Animated.Node<number>,\n      routesLength: Animated.Node<number>,\n      translateX: Animated.Node<number>\n    ) =>\n      multiply(\n        // Make sure that the translation doesn't exceed the bounds to prevent overscrolling\n        min(\n          max(\n            multiply(layoutWidth, sub(routesLength, 1), DIRECTION_RIGHT),\n            translateX\n          ),\n          0\n        ),\n        I18nManager.isRTL ? -1 : 1\n      )\n  );\n\n  render() {\n    const {\n      layout,\n      navigationState,\n      swipeEnabled,\n      children,\n      removeClippedSubviews,\n      gestureHandlerProps,\n    } = this.props;\n\n    const translateX = this.getTranslateX(\n      this.layoutWidth,\n      this.routesLength,\n      this.translateX\n    );\n\n    return children({\n      position: this.position,\n      addListener: this.addListener,\n      removeListener: this.removeListener,\n      jumpTo: this.jumpTo,\n      render: (children) => (\n        <PanGestureHandler\n          ref={this.gestureHandlerRef}\n          simultaneousHandlers={this.state.childPanGestureHandlerRefs}\n          waitFor={this.state.childPanGestureHandlerRefs}\n          enabled={layout.width !== 0 && swipeEnabled && this.state.enabled}\n          onGestureEvent={this.handleGestureEvent}\n          onHandlerStateChange={this.handleGestureEvent}\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          {...gestureHandlerProps}\n        >\n          <Animated.View\n            removeClippedSubviews={removeClippedSubviews}\n            style={[\n              styles.container,\n              layout.width\n                ? {\n                    width: layout.width * navigationState.routes.length,\n                    transform: [{ translateX }] as any,\n                  }\n                : null,\n            ]}\n          >\n            <PagerContext.Provider value={this.providerVal}>\n              {children}\n            </PagerContext.Provider>\n          </Animated.View>\n        </PanGestureHandler>\n      ),\n    });\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}